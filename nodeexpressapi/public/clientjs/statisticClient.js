window.onload = initSession();

function initSession() {
    getSessionData([setLoginStatus]);
};

async function getSessionData(callbacks) {
    let result;
    try {
        let response = await fetch('/user/getSessionInfo');
        if (response.status != 200) {
            console.log("Received status: " + response.status);
            return;
        }

        //reads response stream to completion
        result = await response.text();
        result = JSON.parse(result);
    }
    catch (e) {
        console.log("Server is not responing");
    }
    if (result != undefined) {
        callbacks.forEach(callback => callback(result))
    }

}

function setLoginStatus(data) {
    if (data.authenticated) {
        //Display feedback at footer
        document.getElementById("loginStatus").textContent = "Sie sind angemeldet als: " + data.name;
        //Modify Navigationbar to Logout    
        document.getElementById("RefToLogin").textContent = "Abmelden";
        document.getElementById("RefToLogin").setAttribute("href", "/logout");
    }
}

function map() {
    var MAP_WIDTH = 760;
    var MAP_HEIGHT = 870;

    var mapContainer = document.getElementById("map");
    var map = new Raphael(mapContainer, MAP_WIDTH, MAP_HEIGHT);

    var regions = {};
    regions["Neckar-Odenwald-Kreis"] = map.path("M406.305 99.3076L405.921 99.6926L403.227 105.837L407.066 109.292L392.863 119.277L397.087 129.257L390.943 137.704L388.64 141.165L385.951 136.173L381.343 139.245L382.495 146.546L372.896 148.456L370.207 150.759L370.591 156.524L375.963 160.753L376.73 165.743L387.871 170.729L393.244 176.493L397.471 175.72L395.167 178.413L396.705 186.476L401.312 191.847L412.831 192.62L412.83 194.542L421.665 194.157L422.432 180.718L424.735 173.421L430.879 174.573L435.102 175.343L443.936 185.325L448.927 182.253L450.843 173.036L455.071 173.421L456.991 166.892L461.979 163.437L460.831 157.677L465.439 151.913L476.959 161.134L482.335 160.362L487.708 162.669L493.476 160.747L494.237 151.147L498.848 148.845L501.535 153.071L509.215 156.907L524.943 156.519L527.631 146.542L524.56 141.548L533.007 137.708L529.551 132.718L518.031 129.263L510.364 133.103L509.98 117.359L506.527 109.292L508.449 110.063L518.415 99.6963L513.041 96.6262L511.887 89.3254L507.681 77.4209L511.116 72.0459L515.345 73.9639L520.716 64.7471L518.42 54.3799L511.124 58.2197L502.303 56.6865L496.159 51.6926L486.591 48.6201L488.479 50.5422L485.407 55.5322L479.648 56.6865L475.812 51.3076L470.049 55.9172L461.986 52.0774L460.447 51.6926L456.224 57.8369L452.383 59.374L449.312 74.7295H447.011L444.708 79.3408H442.399L440.863 80.1086L433.562 82.0303L411.295 80.1086L410.527 86.2532L407.103 92.3918L413.979 96.6201L416.282 103.147L411.675 105.448L406.305 99.3076Z");

    regions["Rhein-Neckar-Kreis"] = map.path("M405.952 99.6926L401.69 97.7744L400.159 100.456L395.936 109.677H389.407L382.495 105.068L378.271 108.142L374.044 106.601L375.586 110.44L369.059 119.657L373.663 125.421L367.135 130.03L361.759 129.263L359.839 136.943L356.769 140.013L348.7 147.687L340.255 146.919L336.801 141.548L345.246 135.021L344.479 124.649L342.56 122.349L349.471 114.667L352.932 121.964L361.377 114.286L361.374 107.374L351.007 108.142L344.479 110.443L342.177 107.759L342.943 99.3076L338.335 99.6926L334.879 102.765L330.653 101.229L328.751 102.38L313.372 94.7024L314.525 90.093L311.071 87.0205L309.151 75.1184L312.991 70.509L311.839 61.2922L288.415 65.9016L287.648 67.4365L286.495 68.2024L287.264 72.8135L289.567 72.0459L293.407 90.093L283.808 99.6926L285.343 106.22L281.119 109.677L276.891 110.443L274.59 115.433L284.191 121.964L283.423 134.636L289.951 135.79L294.943 128.876L299.936 130.792L323.359 127.72L322.591 123.886L324.892 123.501L329.121 125.036L328.352 131.563L334.879 141.548L328.735 153.448L325.279 153.833L323.743 155.374L318.367 156.907L317.981 160.364L314.525 161.902L304.926 159.979L303.007 163.048L298.78 156.142L295.325 162.667L287.647 157.292L289.179 153.837L291.868 152.69L297.241 149.997L296.475 142.702L295.706 139.245L290.335 142.696L281.119 138.856L280.352 138.476L274.591 138.093L273.823 140.013H262.688L262.305 141.163V141.929V142.702V143.466L254.623 148.841L254.239 152.298L256.931 153.831L263.071 148.456L261.151 160.364L255.392 166.509L251.936 169.579L251.167 175.347L258.468 179.57L259.232 185.325L272.671 195.693L273.823 193.39L277.279 194.542L280.352 196.075L279.199 198.765L286.106 202.22L289.951 204.521L298.016 204.907L307.615 209.13H308.768H319.904L323.743 218.349L331.039 221.037L338.34 219.886L339.492 222.573L350.234 229.87L357.919 226.03L357.535 219.886L373.663 216.046L375.199 212.974L385.182 202.606L384.031 196.845L387.104 198.38L395.167 192.236L390.177 184.558L396.705 186.476L395.167 178.413L397.471 175.72L393.244 176.493L387.871 170.729L376.73 165.743L375.963 160.753L370.591 156.524L370.207 150.759L372.896 148.456L382.495 146.546L381.343 139.245L385.951 136.173L388.64 141.165L390.943 137.704L397.087 129.257L392.863 119.277L407.066 109.292L403.227 105.837L405.921 99.6926H405.952Z");

    regions["Mannheim"] = map.path("M283.808 99.6926L285.343 106.22L281.119 109.677L276.891 110.443L274.59 115.433L284.191 121.964L283.423 134.636L281.121 138.862L280.352 138.476L274.591 138.093L273.823 140.013H262.688L264.991 130.03L256.931 127.722L249.249 124.652L250.016 109.29L245.407 90.8623L243.487 85.1028L245.407 79.343L245.807 75.1184L255.771 73.1904L263.071 79.3408L274.207 96.6201L283.808 99.6926Z");

    regions["Heidelberg"] = map.path("M281.119 138.856L290.335 142.696L295.706 139.245L296.475 142.702L297.241 149.997L291.868 152.69L289.179 153.837L287.647 157.292L295.325 162.667L298.78 156.142L303.007 163.048L304.926 159.979L314.525 161.902L317.981 160.364L318.367 156.907L323.743 155.374L325.279 153.833L328.735 153.448L334.879 141.548L328.352 131.563L329.121 125.036L324.892 123.501L322.591 123.886L323.359 127.72L299.936 130.792L294.943 128.876L289.951 135.79L283.423 134.636L281.119 138.856Z");

    regions["Main-Tauber-Kreis"] = map.path("M657.072 153.837L667.79 152.302L668.943 149.614L666.641 147.693L663.568 138.856L658.189 120.813L653.964 115.82L656.267 110.058L651.274 96.2315L649.743 94.3176L644.369 93.9348L638.994 99.6963L640.532 101.236L644.365 103.534L633.999 116.589L622.863 117.359L623.631 116.206L619.41 116.589H612.111L608.658 113.134L610.959 106.989L611.343 96.2356L610.189 90.4758L604.815 87.4053L607.887 80.1086L605.58 78.5732L599.055 81.2627L595.215 93.165L583.695 89.708L585.615 87.79L587.535 86.6318L590.607 82.7922L598.287 68.5852L596.751 63.5908L587.54 50.1572L586.387 48.2356L590.224 42.4758L589.841 41.7082L586.385 32.1086L580.237 27.886L580.623 24.0459L569.487 31.7236L563.343 40.5576L559.502 25.5791L551.059 29.4209V37.8662L547.603 39.7844L538.769 34.4131L540.303 29.0322L542.607 26.7295L542.989 16.7471L541.841 14.8291L544.908 10.9893L544.532 1.38599L522.641 5.99121L524.943 16.7532L523.023 18.6709L511.505 11.374L509.983 2.91919L503.839 2.54224L499.227 9.07129L495.392 7.91724L492.319 2.15723L485.791 5.99121L481.568 8.68652L478.495 5.99121L474.271 7.91724L463.52 9.45239L465.435 18.6709L458.911 19.8196L465.439 23.2766L472.352 22.8918L477.728 24.4307L470.427 27.886L473.5 33.6455L479.647 33.2627L480.415 23.2803L485.791 27.1184L488.863 32.4934V38.636L485.407 42.8623L483.104 45.5478L486.56 48.6201L496.159 51.6926L502.303 56.6865L511.124 58.2197L518.42 54.3799L520.716 64.7471L515.345 73.9639L511.116 72.0459L507.681 77.4209L511.887 89.3254L513.041 96.6262L518.415 99.6963L508.449 110.063L506.527 109.292L509.98 117.359L510.364 133.103L518.031 129.263L529.551 132.718L533.007 137.708L542.224 136.558L541.457 142.702L551.823 144.62L551.44 142.702L557.969 141.548L559.503 148.845L567.951 149.997L570.255 146.919L588.688 150.765L594.447 159.979L608.276 159.597L624.788 157.681L639.375 153.841L642.447 151.923L655.887 149.616L657.072 153.837Z");

    regions["Hohenlohekreis"] = map.path("M533.007 137.708L542.224 136.558L541.457 142.702L551.823 144.62L551.44 142.702L557.969 141.548L559.503 148.845L567.951 149.997L570.255 146.919L588.688 150.765L594.447 159.979L592.144 169.579L594.831 175.347L595.215 187.634L593.295 190.323L589.071 191.085L584.079 201.068L570.257 205.677L572.172 212.585L567.185 224.876H556.816L553.359 235.245L549.52 236.78L547.984 244.075L541.072 249.446L533.007 240.62L533.39 258.287L529.551 257.13L521.487 247.913L514.577 252.142L516.495 258.287L513.423 257.13L508.831 247.147L504.224 245.229L492.32 261.358L490.399 258.667L493.86 253.292L490.02 240.62L482.724 242.542L476.959 237.548L475.812 235.245L468.511 233.32L474.658 230.247L473.505 228.329L476.572 224.108L488.863 221.037L491.551 217.579L495.392 214.503L487.327 209.13L488.863 197.229L493.471 191.085L492.322 188.78L497.695 189.165L510.751 183.79L500.769 176.878L498.848 171.112L497.695 164.204L493.471 160.747L494.237 151.147L498.848 148.845L501.535 153.071L509.215 156.907L524.943 156.519L527.631 146.542L524.56 141.548L533.007 137.708Z");

    regions["LK Heilbronn"] = map.path("M423.199 261.741L427.034 261.358L430.49 257.901L434.335 254.446L447.007 257.901L446.239 255.979L457.759 253.292L457.377 252.907L447.775 237.165L442.016 232.942L433.956 227.181L424.74 224.493L423.583 219.118L412.449 217.964L410.148 222.958L395.172 222.19L395.551 222.958L406.688 232.558L411.68 233.325L422.815 240.626L415.904 249.452L420.511 255.979L423.199 261.741ZM339.487 222.573L341.407 224.876L339.487 236.776L345.249 239.472L341.407 247.917L341.791 248.687L352.543 246.38L356.768 254.829L357.151 265.19L353.695 265.579L353.312 273.646L352.932 282.479L355.615 279.021L367.52 280.942L376.352 280.558L380.577 282.093V285.929L387.487 287.466L398.239 286.7L399.396 279.399L409.758 277.103L408.222 272.876L412.063 272.493L417.823 276.329L426.272 277.485L424.352 281.32L429.343 285.165H438.56L441.249 288.235L441.631 289.39L446.239 286.317L454.688 280.942L455.839 284.78L467.743 281.325L481.951 282.858L481.956 280.558L477.732 279.021L481.184 274.792L484.635 273.263L485.796 275.563L486.175 279.403H489.631L494.239 269.804L505.375 269.421L506.911 267.88V259.048L513.423 257.13L508.831 247.147L504.224 245.229L492.32 261.358L490.399 258.667L493.86 253.292L490.02 240.62L482.724 242.542L476.959 237.548L475.813 235.245L468.511 233.32L474.658 230.247L473.505 228.329L476.572 224.108L488.863 221.037L491.551 217.579L495.392 214.503L487.327 209.13L488.863 197.229L493.471 191.085L492.322 188.78L497.695 189.165L510.751 183.79L500.769 176.878L498.848 171.112L497.695 164.204L493.471 160.747L487.708 162.669L482.335 160.362L476.959 161.134L465.439 151.913L460.831 157.677L461.979 163.437L456.991 166.892L455.071 173.421L450.843 173.036L448.927 182.253L443.936 185.325L435.102 175.343L430.879 174.573L424.735 173.421L422.432 180.718L421.665 194.157L412.83 194.542L412.831 192.62L401.312 191.847L396.705 186.476L390.177 184.558L395.167 192.236L387.104 198.38L384.031 196.845L385.182 202.606L375.199 212.974L373.663 216.046L357.535 219.886L357.919 226.03L350.234 229.87L339.487 222.573Z");

    regions["SK Heilbronn"] = map.path("M423.199 261.741L427.034 261.358L430.49 257.901L434.335 254.446L447.007 257.901L446.239 255.979L457.759 253.292L457.377 252.907L447.775 237.165L442.016 232.942L433.956 227.181L424.74 224.493L423.583 219.118L412.449 217.964L410.148 222.958L395.172 222.19L395.551 222.958L406.688 232.558L411.68 233.325L422.815 240.626L415.904 249.452L420.511 255.979L423.199 261.741Z");

    regions["Ludwigsburg"] = map.path("M398.626 387.308L400.931 388.075L403.231 381.929L402.849 372.329L401.307 365.806L405.533 358.118L410.525 362.729L416.285 360.813L415.52 349.677L420.511 348.524L424.735 353.134L429.343 353.519L437.796 346.989L442.786 353.901L450.849 349.292L455.453 347.763L460.063 334.317L464.287 332.013L467.354 332.392L473.119 332.013L476.191 328.173L472.352 330.476L469.668 322.03L466.212 323.948L460.449 321.257L458.532 315.118L464.676 315.501L468.511 310.124L469.663 309.741H471.967L474.658 307.437L471.583 302.829L471.199 302.446L469.668 301.292L465.435 298.987L463.52 298.22L466.591 296.302L472.352 291.308L478.111 290.157L481.951 282.862L467.743 281.325L455.839 284.78L454.688 280.942L446.239 286.317L441.631 289.39L441.249 288.235L438.56 285.165H429.343L424.352 281.32L426.271 277.485L417.823 276.329L412.063 272.493L408.222 272.876L409.758 277.103L399.396 279.399L398.239 286.7L387.487 287.466L380.577 285.929V282.093L376.352 280.558L367.52 280.942L355.615 279.021L352.927 282.476L359.834 287.466L359.839 287.853L369.439 311.278L369.823 317.806L364.831 318.962L359.839 316.657L358.305 324.333L362.532 328.173L359.834 329.325L361.377 331.63L364.831 345.837L372.132 350.446L374.044 359.662L380.577 358.509L390.177 360.813L392.868 363.114V367.722L389.791 371.563L394.778 384.62L398.626 387.308Z");

    regions["Schwäbisch Hall"] = map.path("M692.782 275.181L694.671 274.413L691.215 262.892L679.695 261.358L692.751 249.452L690.447 242.157L686.224 238.702L673.936 229.485L671.631 231.021L661.264 224.493L660.879 220.267L658.959 205.292L661.264 204.142L657.808 201.068L659.728 194.919L662.415 199.528L667.023 192.231L662.415 186.856L661.647 183.403L662.028 174.958L659.728 176.109L655.887 173.421L657.041 153.837L655.887 149.616L642.447 151.923L639.375 153.841L624.788 157.681L608.276 159.597L594.447 159.979L592.144 169.579L594.831 175.347L595.215 187.634L593.295 190.323L589.071 191.085L584.079 201.068L570.257 205.677L572.172 212.585L567.185 224.876H556.816L553.359 235.245L549.52 236.78L547.984 244.075L541.072 249.446L533.007 240.62L533.39 258.287L529.551 257.13L521.487 247.913L514.577 252.142L516.495 258.287L513.423 257.13L506.911 259.048V267.886L515.732 275.948L534.164 278.249L531.471 282.478L532.623 290.163L531.471 293.229L548.369 300.524L549.903 308.206L554.127 310.892L563.728 307.437L566.799 313.196L579.471 314.351V318.573L589.455 324.718L588.688 328.558L595.988 326.253L597.522 328.173L605.201 318.958L603.279 315.118L608.655 310.124L611.343 311.278L621.327 305.907L633.231 304.753L627.86 297.071L623.247 290.925L626.322 285.929L623.247 282.476L634.387 278.247L641.295 282.476L647.44 280.558L657.812 281.708L671.247 275.948L676.623 276.718V281.325L681.229 282.093L683.918 279.79L692.782 275.181Z");

    regions["Rems-Murr-Kreis"] = map.path("M442.776 353.901L442.011 360.813L446.234 373.485L460.063 379.63V381.548L467.359 384.235L469.663 381.548L477.728 383.085L478.879 376.558L483.104 380.013L485.407 387.692L490.016 381.548L498.079 382.317L503.839 384.62L506.527 389.614L509.98 386.157L519.564 391.917L523.402 391.151L525.327 391.528L526.863 387.304L525.327 380.009L534.159 383.466L537.231 382.313L535.312 376.942L541.841 373.485L543.375 368.876L540.688 365.037L555.279 362.733L561.423 366.573L570.638 361.96L572.556 359.657L570.255 352.747L571.412 351.979L565.647 344.687L565.643 334.317L555.663 329.708V324.333L549.135 320.103L554.508 317.802L554.132 310.897L549.903 308.206L548.369 300.524L531.471 293.229L532.623 290.163L531.471 282.478L534.164 278.249L515.732 275.948L506.911 267.886L505.375 269.421L494.239 269.804L489.631 279.403H486.175L481.951 280.558V282.856L478.111 290.157L472.352 291.308L466.591 296.302L463.52 298.22L465.435 298.987L469.668 301.292L471.199 302.446L471.583 302.829L474.658 307.437L471.967 309.741H469.663L468.511 310.124L464.676 315.501L458.532 315.118L460.449 321.257L466.212 323.948L469.668 322.03L472.352 330.476L476.191 328.173L473.119 332.013L467.354 332.392L464.287 332.013L460.063 334.317L455.453 347.763L450.849 349.292L442.776 353.901Z");

    regions["Ostalbkreis"] = map.path("M734.635 393.067L733.455 381.548L735.377 380.396L735.762 372.333L738.832 369.646L740.367 368.493V360.431L734.99 358.509L735.762 355.437L741.521 352.364V344.687L739.986 343.528L741.521 338.542L734.224 332.019L741.521 329.325L739.215 318.19L733.071 312.813L732.688 309.358L729.231 310.124L728.843 308.974L731.535 305.513L723.471 302.058L721.169 296.302L716.561 295.917L715.794 287.085L711.568 285.548L708.495 288.235L707.343 287.085L693.135 281.708L692.751 275.181L683.918 279.79L681.229 282.093L676.623 281.325V276.718L671.247 275.948L657.812 281.708L647.44 280.558L641.295 282.476L634.387 278.247L623.247 282.476L626.322 285.929L623.247 290.925L627.86 297.071L633.231 304.753L621.327 305.907L611.343 311.278L608.655 310.124L603.279 315.118L605.201 318.958L597.522 328.173L595.988 326.253L588.688 328.558L589.455 324.718L579.471 318.573V314.351L566.799 313.196L563.728 307.437L554.127 310.892L554.508 317.802L549.135 320.103L555.663 324.333V329.708L565.643 334.317L565.647 344.687L571.412 351.979L570.255 352.747L572.556 359.657L570.638 361.96L561.423 366.573L555.279 362.733L540.688 365.037L543.375 368.876L541.841 373.485L535.312 376.942L537.231 382.313L544.913 383.466L559.122 381.165L558.736 383.085L566.031 382.317L568.335 390.765L575.242 393.069L576.399 397.292L578.319 398.829L580.62 403.052L588.303 399.591L592.527 400.364L600.971 404.589L605.58 404.206L606.347 398.835L603.658 400.753L600.583 390.769L607.503 389.991L612.879 394.601L613.264 398.829L626.319 399.979H629.009L630.545 396.146L632.079 390.376L635.535 385.769H638.989L640.527 392.298L646.671 392.302L650.127 388.075L653.199 389.991L658.57 387.69L666.255 377.708L667.79 386.925L673.169 391.917L673.936 381.165L681.231 379.63L698.513 389.229L712.719 397.677L718.865 398.442L734.635 393.067Z");

    regions["Heidenheim"] = map.path("M687.021 481.005L695.44 477.548L698.896 478.702L707.343 476.392L704.655 471.021L706.189 466.03L708.108 463.724L705.808 454.124L703.503 451.431V446.058L708.879 445.677L709.643 444.142L702.736 434.542L693.901 426.093L693.135 417.642L696.59 415.341L696.595 411.886L708.113 416.493L708.879 414.19H713.104L716.56 425.325L719.247 427.245L726.159 422.253L726.928 414.573L730.764 410.349L736.529 409.964L738.441 412.651L731.53 424.558L744.975 420.718L751.502 413.421L750.348 411.118L742.285 398.829L744.592 396.142L734.604 393.067L718.865 398.442L712.719 397.677L698.513 389.229L681.231 379.63L673.936 381.165L673.169 391.917L667.79 386.925L666.255 377.708L658.57 387.69L653.199 389.991L650.127 388.075L646.671 392.302L640.527 392.298L638.989 385.769H635.535L632.079 390.376L630.545 396.146L629.009 399.979H626.319L627.856 408.046L619.023 422.636L612.495 422.253L609.808 431.853L615.568 435.692L622.096 442.601L620.943 449.513L639.756 445.677L643.984 452.974L649.356 453.741L655.119 457.964L656.655 458.729L657.808 464.103L665.104 464.487L667.794 465.646L669.327 463.345L672.399 466.413L676.241 462.958L677.007 469.485L683.151 479.47L687.021 481.005Z");

    regions["Stuttgart"] = map.path("M442.776 353.901L442.011 360.813L446.234 373.485L460.063 379.63V381.548L450.079 383.47L448.159 389.614L445.471 393.446L434.721 398.062L442.783 411.118H442.399L432.417 411.886L423.583 406.892L408.224 404.974L391.711 393.069L393.247 391.147L398.623 387.308L400.931 388.075L403.231 381.929L402.849 372.329L401.307 365.806L405.533 358.118L410.525 362.729L416.285 360.813L415.52 349.677L420.511 348.524L424.735 353.134L429.343 353.519L437.796 346.989L442.776 353.901Z");

    regions["Göppingen"] = map.path("M615.568 435.692L609.808 431.853L612.495 422.253L619.023 422.636L627.856 408.046L626.319 399.979L613.264 398.829L612.879 394.601L607.503 389.991L600.583 390.769L603.658 400.753L606.347 398.835L605.58 404.206L600.971 404.589L592.527 400.364L588.303 399.591L580.62 403.052L578.319 398.829L576.399 397.292L575.242 393.069L568.335 390.765L566.031 382.317L558.736 383.085L559.122 381.165L544.913 383.466L537.231 382.313L534.159 383.466L525.327 380.009L526.863 387.304L525.327 391.528L523.402 391.151L519.564 391.917L509.98 386.157L506.527 389.614L508.444 391.147L502.305 400.364L503.841 404.589L501.535 406.509L504.224 410.349L502.688 414.573L503.839 417.646L503.453 421.103L511.505 425.325L515.732 424.558L519.18 426.093L518.031 429.929L519.567 431.847L514.196 434.544L528.78 441.067L528.402 447.979L529.166 452.585L528.399 457.19L520.34 465.263L525.713 470.253L526.479 471.021H537.999L544.527 477.548L553.359 471.403V469.485L559.887 467.948L560.271 464.876V463.341L562.189 461.036H562.575L584.079 462.573L597.516 451.437L604.042 439.534L615.568 435.692Z");

    regions["Esslingen"] = map.path("M525.713 470.253L520.34 465.263L528.399 457.19L529.166 452.585L528.402 447.979L528.78 441.067L514.196 434.544L519.567 431.847L518.031 429.929L519.18 426.093L515.732 424.558L511.505 425.325L503.453 421.103L503.839 417.646L502.688 414.573L504.224 410.349L501.535 406.509L503.841 404.589L502.305 400.364L508.444 391.147L506.527 389.614L503.839 384.62L498.079 382.317L490.016 381.548L485.407 387.692L483.104 380.013L478.879 376.558L477.728 383.085L469.663 381.548L467.359 384.235L460.063 381.548L450.079 383.47L448.159 389.614L445.471 393.446L434.721 398.062L442.783 411.118H442.399L432.417 411.886L423.583 406.892L408.224 404.974L405.151 406.509L407.453 409.579L403.227 414.958L403.61 418.413L413.215 417.257L420.511 426.856L421.663 429.165L424.352 433.39L418.591 444.524H426.271L427.423 447.218L432.415 447.597L430.111 450.667L432.804 453.358L432.799 453.741L436.254 459.118L439.327 456.046L443.162 456.431L444.32 458.349L453.151 459.501L456.224 454.892H460.063L461.215 457.579L459.295 461.036L460.063 464.108L462.364 469.103L465.439 466.03L475.039 471.401L478.879 472.942L482.335 469.866L485.023 471.021L493.087 467.181L499.999 474.481L498.463 479.466L502.688 476.774L521.487 470.247L525.713 470.253Z");

    regions["Ulm"] = map.path("M629.038 541.276L623.631 535.901L622.096 530.142L639.759 511.325L637.46 501.358L631.312 498.286L622.863 497.13L621.327 503.257L608.271 506.329L606.352 510.173L608.655 514.396L607.498 519.005L595.598 531.298L591.375 532.058V539.741L608.66 540.892L612.113 547.802L606.352 552.413L614.415 555.866L617.104 555.485L625.169 550.876L624.016 545.112L625.169 541.657L629.038 541.276Z");

    regions["Alb-Donau-Kreis"] = map.path("M653.23 610.78L650.513 598.108L650.896 595.421V595.036L645.521 584.286L646.287 576.989L645.135 570.075L645.901 566.62L638.993 557.786L632.079 544.353L629.007 541.276L625.169 541.657L624.016 545.112L625.169 550.876L617.104 555.485L614.415 555.866L606.352 552.413L612.113 547.802L608.66 540.892L591.375 539.741V532.058L595.598 531.298L607.498 519.005L608.655 514.396L606.352 510.173L608.271 506.329L621.327 503.257L622.863 497.13L631.312 498.286L637.46 501.358L643.6 502.124L655.116 494.062L662.799 501.741L671.242 500.2L680.076 491.368L683.916 489.071L685.841 489.067L689.68 487.913L688.527 484.845L687.759 482.925L686.989 481.005L683.151 479.47L677.007 469.485L676.241 462.958L672.399 466.413L669.327 463.345L667.794 465.646L665.104 464.487L657.808 464.103L656.655 458.729L655.119 457.964L649.356 453.741L643.984 452.974L639.756 445.677L620.943 449.513L622.096 442.601L615.568 435.692L604.042 439.534L597.516 451.437L584.079 462.573L562.575 461.036H562.189L560.271 463.341V464.876L559.887 467.948L553.359 469.485V471.403L544.527 477.548L537.999 471.021H526.479V488.687L528.016 493.292L533.39 495.979L534.543 500.204L540.688 516.317L537.999 519.005L536.848 516.317L535.312 523.997L524.946 524.765L527.631 538.974L524.56 548.19L513.039 553.563L515.732 562.396L506.148 567.774L511.124 576.606L503.834 580.058L501.919 584.667L511.119 589.657L515.728 600.413L524.56 599.257L528.785 594.267L535.695 597.341L536.848 600.03L533.775 602.331L539.919 601.948L542.224 605.403L544.913 610.392L543.375 613.085L549.135 606.558L554.508 604.636L561.808 608.093L566.029 605.401L565.264 597.341L564.879 595.802L571.019 591.196L578.314 585.437L577.936 580.446L580.623 577.759L588.303 578.524L594.068 572.38L595.6 570.845L600.207 562.013L609.423 564.702L610.959 571.614L614.415 572.38L621.713 571.614L627.087 580.829L632.848 579.292L639.759 596.573L640.527 599.646L645.135 598.108L646.671 601.181L638.224 615.005L632.079 615.39V615.774L641.68 618.845L653.23 610.78Z");

    regions["Reutlingen"] = map.path("M418.591 444.524H426.271L427.423 447.218L432.415 447.597L430.111 450.667L432.804 453.358L432.799 453.741L436.254 459.118L439.327 456.046L443.162 456.431L444.32 458.349L453.151 459.501L456.224 454.892H460.063L461.215 457.579L459.295 461.036L460.063 464.108L462.364 469.103L465.439 466.03L475.039 471.401L478.879 472.942L482.335 469.866L485.023 471.021L493.087 467.181L499.999 474.481L498.463 479.466L502.688 476.774L521.487 470.247H525.713L526.479 471.021V488.687L528.016 493.292L533.39 495.979L534.543 500.204L540.688 516.317L537.999 519.005L536.848 516.317L535.312 523.997L524.946 524.765L527.631 538.974L524.56 548.19L513.039 553.563L515.732 562.396L506.148 567.774L511.124 576.606L503.834 580.058L501.916 584.671L504.607 592.353L500.379 596.19L496.543 597.724L495.392 593.501L479.264 598.108L475.808 597.343L471.199 588.118L466.207 581.597L462.367 576.995L453.151 568.163L447.392 566.626L431.264 563.935L426.271 565.853L421.663 557.405L427.423 555.872L433.182 546.651L432.799 546.271L428.572 545.118L423.199 542.046V537.052L417.823 532.446L412.442 531.288L409.37 527.448L417.054 515.548L409.759 510.942L414.367 500.206V495.597L411.684 494.446L412.068 490.22L418.977 486.765L417.439 483.692L414.751 479.847L416.287 474.856L421.663 475.245L423.967 473.319L423.582 465.257L423.199 465.263L418.591 466.796V464.103L412.068 458.733L412.447 452.974L413.983 445.677L418.591 444.524Z");

    regions["Böblingen"] = map.path("M418.591 444.524L424.352 433.39L421.663 429.165L420.511 426.856L413.215 417.257L403.61 418.413L403.227 414.958L407.453 409.579L405.151 406.509L408.224 404.974L391.711 393.069L393.247 391.147L398.618 387.308L394.778 384.62L389.791 371.563L392.868 367.722V363.114L390.177 360.813L380.577 358.509L374.044 359.662L372.132 350.446L364.831 345.837L358.305 348.142L356.383 353.13L350.623 357.358L354.079 359.276L351.007 364.647L356.383 361.19L357.919 364.651L355.227 367.724L357.53 370.03L356.383 371.181L354.468 369.263L346.02 373.103L343.332 370.413L336.799 375.403L333.728 378.476L332.572 380.776L337.184 384.235L341.412 387.308L339.487 394.22L346.016 394.987L351.392 399.216L346.016 405.358L347.551 407.657L336.799 419.181V421.103L331.423 423.021L330.653 431.847L330.271 447.214L318.751 442.989L318.367 446.446L321.055 461.421L323.743 464.108L320.671 466.796L323.359 474.093L327.199 474.858L330.655 479.085L340.635 483.692L342.177 483.308L344.868 475.63L343.711 468.718L352.159 467.563L353.312 460.267L369.055 450.286L375.963 449.519L382.49 450.286L389.791 454.892L391.711 450.667L394.783 448.364L400.543 449.897L405.151 437.991L410.144 440.687L413.983 445.677L418.591 444.524Z");

    regions["Tübingen"] = map.path("M412.449 531.292L398.239 534.749L390.943 530.907L381.343 529.759L380.577 525.151L377.505 527.452L364.449 524.38L362.144 523.991L348.316 519.774L347.936 514.013L337.951 517.847L323.743 513.63L322.977 505.563L335.268 497.519L336.804 496.364L335.268 493.677L319.904 481.001L323.359 474.093L327.199 474.858L330.655 479.085L340.635 483.692L342.177 483.308L344.868 475.63L343.711 468.718L352.159 467.563L353.312 460.267L369.055 450.286L375.963 449.519L382.49 450.286L389.791 454.892L391.711 450.667L394.783 448.364L400.543 449.897L405.151 437.991L410.144 440.687L413.983 445.677L412.447 452.974L412.068 458.733L418.591 464.103V466.796L423.199 465.263L423.582 465.257L423.967 473.319L421.663 475.245L416.287 474.856L414.751 479.847L417.439 483.692L418.977 486.765L412.068 490.22L411.684 494.446L414.367 495.597V500.206L409.759 510.942L417.054 515.548L409.37 527.448L412.449 531.292Z");

    regions["Konstanz"] = map.path("M365.631 796.636L379.034 784.349L374.811 779.358L369.818 778.591L357.146 770.524L365.98 768.989L382.879 771.677L407.453 783.196L419.743 789.343L427.649 791.736L420.896 770.524L403.999 759.769L399.007 757.466L384.804 743.646L387.104 739.036L395.167 742.876L397.855 741.341L394.404 727.513L394.783 724.058H398.623L403.231 730.204L409.759 728.286L407.839 723.292L414.369 718.687L415.135 714.075L414.751 710.62L403.615 704.862L394.399 700.253L395.936 696.03L392.863 692.958L380.954 694.108L369.054 698.718L365.983 694.876L346.783 703.708L339.104 715.229L331.423 711.774L332.196 697.181L326.433 708.317L310.305 712.157L306.849 707.165L302.623 712.925L299.551 711.005L301.082 717.913L296.091 725.591L290.719 726.749L286.879 723.292L279.599 743.646L283.039 759.005L288.033 756.317L291.487 745.563L298.399 754.013L304.543 757.47L311.071 762.075L303.771 770.519L309.914 775.897L307.62 784.733L324.9 791.263L328.356 784.733L324.13 780.509L318.367 779.358L319.135 775.134L327.967 767.837L331.039 777.052L338.34 780.892L344.096 780.509L344.479 780.892L339.104 783.192L338.721 789.343L345.249 799.321L350.623 802.015L365.631 796.636Z");

    regions["Bodenseekreis"] = map.path("M395.198 742.876L407.455 751.708L431.264 766.687L436.64 778.204L450.079 790.493L453.151 792.413L460.063 795.485L466.207 798.558L475.808 795.866L493.087 802.392L501.151 802.774L505.375 807.774L509.983 815.837L510.367 820.446L516.492 826.585L528.785 827.741L533.39 828.124L535.312 824.669L539.151 825.437L538.387 820.442L551.436 818.142L549.135 811.614L550.671 808.542L556.042 810.075L562.189 805.085L564.879 801.63L561.041 791.646L556.815 789.724H547.215L541.457 787.804L542.224 782.431L535.312 783.964L527.631 774.358L518.415 772.058L503.071 772.06L499.999 761.692L495.007 759.774L491.547 762.845L486.555 755.548L494.234 744.413L485.791 737.505L483.871 739.806L480.804 738.651L477.348 739.036L470.049 732.124L463.52 724.058L458.532 720.985L450.084 724.058L442.781 715.614L437.412 726.36L432.804 724.442L425.124 730.587L409.759 728.286L403.231 730.204L398.623 724.058H394.783L394.404 727.513L397.855 741.341L395.198 742.876Z");

    regions["Ravensburg"] = map.path("M551.436 818.142L549.135 811.614L550.671 808.542L556.042 810.075L562.189 805.085L564.879 801.63L561.041 791.646L556.815 789.724H547.215L541.457 787.804L542.224 782.431L535.312 783.964L527.631 774.358L518.415 772.058L503.071 772.06L499.999 761.692L495.007 759.774L491.547 762.845L486.555 755.548L494.234 744.413L485.791 737.505L483.871 739.806L480.799 738.647L478.495 725.591L472.735 715.991L478.879 707.165L478.495 705.245L479.647 702.942L481.184 701.024L480.031 693.724L485.412 694.493L484.258 685.276L492.705 684.892L500.383 686.431L501.919 685.276L508.063 675.292L514.191 684.509L515.728 685.276L517.645 682.2L518.799 684.124L519.179 670.69L530.314 671.071L534.545 684.503L541.071 684.892L552.207 678.364L555.663 682.591L560.655 679.901L568.719 682.204L585.999 689.118L592.527 687.196L597.898 679.134L607.503 678.364L610.959 684.892L640.144 691.802L646.287 682.204L652.047 679.13L656.276 681.819L652.042 683.358L650.891 688.349L657.423 695.646L657.041 702.558V703.708L656.271 717.917L652.815 721.759H648.976L650.513 726.364L655.119 722.524L657.42 732.124L662.799 739.421L663.951 742.493L658.959 746.718H652.815L646.287 753.245L659.343 764.765L658.189 770.519L658.956 777.431L664.723 783.196L662.42 793.563L653.588 797.79L648.976 807.39L644.751 792.03L633.615 790.493L628.623 792.03L621.329 802.013H612.495L609.036 800.093L602.508 798.558L599.055 794.329L587.535 794.712L577.169 804.313L578.703 805.847L566.031 820.829L562.575 816.604L560.655 819.292L554.508 821.214L551.436 818.142Z");

    regions["Biberach"] = map.path("M656.303 681.819L658.575 681.437L659.729 670.687L663.185 666.075L663.568 663.774L662.799 662.235L665.104 647.646L664.721 636.509L664.719 634.974L663.951 631.519L657.036 623.452L656.655 622.687L653.199 610.78L641.68 618.845L632.079 615.774V615.39L638.224 615.005L646.671 601.181L645.135 598.108L640.527 599.646L639.759 596.573L632.848 579.292L627.087 580.829L621.713 571.614L614.415 572.38L610.959 571.614L609.423 564.702L600.207 562.013L595.6 570.845L594.068 572.38L588.303 578.524L580.623 577.759L577.936 580.446L578.314 585.437L571.019 591.196L564.879 595.802L565.264 597.341L566.029 605.401L561.808 608.093L554.508 604.636L549.135 606.558L543.375 613.085L544.913 610.392L542.224 605.403L539.919 601.948L533.775 602.331L536.848 600.03L535.695 597.341L528.785 594.267L524.56 599.257L515.728 600.413L511.119 589.657L501.919 584.667L504.607 592.353L500.379 596.19L496.543 597.724L495.392 593.501L479.264 598.108L475.808 597.343L471.199 588.118L466.207 581.591L456.224 588.892L459.295 600.794L453.921 610.394L444.705 613.853L458.532 622.302L460.833 629.597L468.132 632.286L467.359 635.741L473.887 636.892L478.879 636.509L478.111 634.591L486.945 639.579L498.081 644.19L505.759 646.493L507.295 647.642L511.887 648.792L514.577 653.403L521.1 654.558L523.79 659.554V663.39L528.016 665.692L530.319 671.067L534.545 684.503L541.071 684.892L552.207 678.364L555.663 682.591L560.655 679.901L568.719 682.204L585.999 689.118L592.527 687.196L597.898 679.134L607.503 678.364L610.959 684.892L640.144 691.802L646.287 682.204L652.047 679.13L656.303 681.819Z");

    regions["Sigmaringen"] = map.path("M480.799 738.647L478.495 725.591L472.735 715.991L478.879 707.165L478.495 705.245L479.647 702.942L481.184 701.024L480.031 693.724L485.412 694.493L484.258 685.276L492.705 684.892L500.383 686.431L501.919 685.276L508.063 675.292L514.191 684.509L515.728 685.276L517.645 682.2L518.799 684.124L519.179 670.69L530.314 671.071L528.016 665.692L523.79 663.39V659.554L521.1 654.558L514.577 653.403L511.887 648.792L507.295 647.642L505.759 646.493L498.081 644.19L486.945 639.579L478.111 634.591L478.879 636.509L473.887 636.892L467.359 635.741L468.132 632.286L460.833 629.597L458.532 622.302L444.705 613.853L453.921 610.394L459.295 600.794L456.224 588.892L466.207 581.591L462.367 576.995L453.151 568.163L447.392 566.626L431.264 563.935L426.271 565.853L425.119 570.077L406.688 576.604L407.453 582.364L425.5 592.731L423.204 596.958L425.505 606.173L422.432 613.472L417.823 617.308L418.207 620.763L407.076 611.929L400.932 615.001L387.1 608.862L381.728 610.78L378.653 616.157L374.815 623.837L367.904 625.374L367.139 629.979L369.436 636.509L372.892 638.046L377.887 644.19L375.586 648.796L365.604 649.563L363.684 647.646L362.527 648.792L367.904 659.159L372.896 658.392L376.352 659.165L381.343 664.157L379.808 672.604L383.264 676.058L380.959 680.286V694.108L392.863 692.958L395.936 696.03L394.399 700.253L403.615 704.862L414.751 710.62L415.135 714.075L414.369 718.687L407.839 723.292L409.759 728.286L425.124 730.587L432.804 724.442L437.412 726.36L442.781 715.614L450.084 724.058L458.532 720.985L463.52 724.058L470.049 732.124L477.348 739.036L480.799 738.647Z");

    regions["Tuttlingen"] = map.path("M380.959 694.108V680.286L383.264 676.058L379.808 672.604L381.343 664.157L376.352 659.165L372.896 658.392L367.904 659.159L362.527 648.792L363.684 647.646L365.604 649.563L375.586 648.796L377.887 644.19L372.892 638.046L369.436 636.509L367.135 629.979L363.295 631.519L357.151 628.829L352.159 630.364L349.471 629.979L344.863 619.229L344.479 617.692L339.1 613.853H336.799L336.031 605.784L332.572 602.329L327.204 600.796L321.439 601.563L319.904 608.476L316.833 609.63L317.215 612.317L312.224 616.925L303.776 618.841L299.551 624.604L293.796 624.22L287.648 631.13L278.049 636.892L278.815 641.118L286.879 650.333L285.726 652.636L287.648 653.79L288.804 656.481L285.343 663.386L293.407 669.534L290.719 672.22L292.254 677.979L287.264 683.747L284.959 689.112L279.583 686.812L274.212 689.501L274.974 705.245L280.348 712.157L278.815 714.845L286.879 723.292L290.719 726.749L296.091 725.591L301.082 717.913L299.551 711.005L302.623 712.925L306.849 707.165L310.305 712.157L326.433 708.317L332.196 697.181L331.423 711.774L339.104 715.229L346.783 703.708L365.983 694.876L369.054 698.718L380.959 694.108Z");

    regions["Zollernalbkreis"] = map.path("M314.525 527.837L312.991 532.446L313.758 540.509L303.393 546.271L309.535 548.958V551.259L294.943 557.022L291.871 559.325L300.319 563.935L295.706 568.544L303.776 572.765L306.849 582.364L304.931 586.204L310.3 591.964L315.295 594.271L308.768 601.563L316.833 609.63L319.904 608.476L321.439 601.563L327.204 600.796L332.572 602.329L336.031 605.784L336.799 613.853H339.1L344.479 617.692L344.863 619.229L349.471 629.979L352.159 630.364L357.151 628.829L363.295 631.519L367.135 629.979L367.904 625.374L374.815 623.837L378.653 616.157L381.728 610.78L387.1 608.862L400.932 615.001L407.076 611.929L418.207 620.763L417.823 617.308L422.432 613.472L425.505 606.173L423.204 596.958L425.5 592.731L407.453 582.364L406.688 576.604L425.119 570.077L426.271 565.853L421.663 557.405L427.423 555.872L433.182 546.651L432.799 546.271L428.572 545.118L423.199 542.046V537.052L417.823 532.446L412.449 531.292L398.239 534.749L390.943 530.907L381.343 529.759L380.577 525.151L377.505 527.452L364.449 524.38L362.144 523.991L348.316 519.774L347.936 514.013L337.951 517.847L323.743 513.63L322.207 515.931L319.904 525.913L314.525 527.837Z");

    regions["Rottweil"] = map.path("M199.325 603.103L200.092 604.636L213.921 606.558L226.591 603.485L238.879 605.401L237.726 600.03L247.706 601.181L248.868 605.021L258.079 606.173L267.68 620.765L264.224 625.374L274.207 641.886L278.815 641.118L278.049 636.892L287.648 631.13L293.796 624.22L299.551 624.604L303.776 618.841L312.224 616.925L317.215 612.317L316.833 609.63L308.768 601.563L315.295 594.271L310.3 591.964L304.931 586.204L306.849 582.364L303.776 572.765L295.706 568.544L300.319 563.935L291.871 559.325L294.943 557.022L309.535 551.259V548.958L303.393 546.271L313.758 540.509L312.991 532.446L314.525 527.837L303.007 524.38L299.551 519.39L282.271 520.544L274.207 517.853L271.904 518.62L266.911 516.702H259.232L260.768 523.229L251.167 525.147L255.396 534.364L247.711 538.204L255.012 545.886L253.471 550.493L245.023 550.876L240.804 555.485L238.111 547.421L230.82 547.415L220.068 540.888L220.449 526.298L212.768 522.458L206.239 536.667L210.468 543.964L212.383 555.485L200.868 559.319L203.551 570.458L201.249 574.687L203.551 585.819L207.007 587.358L206.239 595.804L199.325 603.103Z");

    regions["Freudenstadt"] = map.path("M314.525 527.837L303.007 524.38L299.551 519.39L282.271 520.544L274.207 517.853L271.904 518.62L266.911 516.702H259.232L260.768 523.229L251.167 525.147L255.396 534.364L247.711 538.204L255.012 545.886L253.471 550.493L245.023 550.876L240.804 555.485L238.111 547.421L230.82 547.415L220.068 540.888L220.449 526.298L212.768 522.458L206.239 536.667H205.087L203.167 533.216L192.415 519.003L188.959 516.702L194.335 512.093L200.095 487.913V487.528L198.177 483.308L192.033 482.925L186.655 477.165L185.505 457.97L191.648 450.671L184.352 441.446L188.191 441.067L197.407 446.44L211.615 447.208L221.215 441.833L228.127 435.688L229.663 429.159L234.653 428.396L245.791 437.229L248.863 441.452L265.759 448.364H266.525L272.287 455.657L275.743 452.97L276.126 457.19L271.52 462.19L277.663 464.88L282.271 463.347L284.959 466.03L288.415 467.563L281.505 477.929L289.951 481.774L299.551 478.317L304.159 487.917L314.525 487.151L319.904 481.005L335.268 493.677L336.804 496.364L335.268 497.519L322.977 505.563L323.743 513.63L322.207 515.931L319.904 525.913L314.525 527.837Z");

    regions["Pforzheim"] = map.path("M307.615 355.82L312.991 360.046L325.279 356.974L327.199 351.218L335.264 346.989L331.423 343.917L331.418 337.39L327.578 337.774L322.591 323.563L314.911 321.257L312.996 324.331L308.768 323.563L304.159 328.942H299.936L296.095 324.718L290.719 328.173L291.871 332.392L294.56 334.696L295.711 342.376L293.41 347.753L289.951 348.907L298.016 356.589H306.079L307.615 355.82Z");

    regions["Enzkreis"] = map.path("M256.926 361.19L259.999 363.497L264.607 365.037L262.688 370.03L265.759 374.636L270.751 372.329L273.054 365.421L279.963 363.118L282.653 366.573L288.033 358.892L296.479 365.037L307.232 363.118L306.079 356.589H298.016L289.951 348.907L293.41 347.753L295.711 342.376L294.56 334.696L291.871 332.392L290.719 328.173L296.095 324.718L299.936 328.942H304.159L308.768 323.563L312.996 324.331L314.911 321.257L322.591 323.563L327.578 337.774L331.418 337.39L331.423 343.917L335.264 346.989L327.199 351.218L325.279 356.974L312.991 360.046L307.615 355.82L315.295 370.792L318.369 368.876L324.896 378.476H333.729L336.799 375.403L343.332 370.413L346.02 373.103L354.468 369.263L356.383 371.181L357.53 370.03L355.227 367.724L357.919 364.651L356.383 361.19L351.007 364.647L354.079 359.276L350.623 357.358L356.383 353.13L358.305 348.142L364.831 345.837L361.377 331.63L359.834 329.325L362.532 328.173L358.305 324.333L359.839 316.657L364.831 318.962L369.823 317.806L369.439 311.278L359.839 287.853L359.834 287.466L352.927 282.476L353.307 273.646L343.327 272.493L342.56 281.325L324.511 277.866L317.604 285.165V295.528L317.981 297.067L312.607 299.368L302.239 297.067L299.551 292.075L293.407 298.22L283.423 299.759L281.887 299.374L278.433 298.989L274.596 308.589L269.215 311.657L272.287 324.329L264.224 331.63L265.759 339.692L259.232 346.989L251.167 351.597L256.926 361.19Z");

    regions["Calw"] = map.path("M256.926 361.19L259.999 363.497L264.607 365.037L262.688 370.03L265.759 374.636L270.751 372.329L273.054 365.421L279.963 363.118L282.653 366.573L288.033 358.892L296.479 365.037L307.232 363.118L306.079 356.589L307.615 355.823L315.295 370.792L318.369 368.876L324.896 378.476H333.728L332.572 380.776L337.184 384.235L341.412 387.308L339.487 394.22L346.016 394.987L351.392 399.216L346.016 405.358L347.551 407.657L336.799 419.181V421.103L331.423 423.021L330.653 431.847L330.271 447.214L318.751 442.989L318.367 446.446L321.055 461.421L323.743 464.108L320.671 466.796L323.359 474.093L319.904 481.001L314.525 487.151L304.159 487.917L299.551 478.317L289.951 481.774L281.505 477.929L288.415 467.563L284.959 466.03L282.271 463.347L277.663 464.88L271.52 462.19L276.126 457.19L275.743 452.97L272.287 455.657L266.525 448.364H265.759L248.863 441.452L245.791 437.229L234.655 428.396L240.033 426.862L240.415 420.718L243.873 418.796L244.64 411.118L251.938 397.292L254.239 385.005L249.633 381.929L238.879 389.614L241.951 379.245L240.033 371.563L231.583 366.958L236.196 363.892L234.66 359.662L228.896 356.589L229.663 355.82L236.191 357.358L238.111 355.052L242.724 361.196L256.926 361.19Z");

    regions["LK Karlsruhe"] = map.path("M269.22 311.662L274.596 308.589L278.433 298.989L281.887 299.374L283.423 299.759L293.407 298.22L299.551 292.075L302.239 297.067L312.607 299.368L317.981 297.067L317.604 295.528V285.165L324.511 277.866L342.56 281.325L343.327 272.493L353.307 273.645L353.695 265.579L357.151 265.19L356.768 254.829L352.543 246.38L341.791 248.687L341.407 247.917L345.249 239.472L339.487 236.776L341.407 224.876L339.487 222.573L338.34 219.886L331.039 221.037L323.743 218.349L319.904 209.13H308.768H307.615L298.016 204.907L289.951 204.521L286.106 202.22L279.199 198.765L280.352 196.075L277.279 194.542L273.823 193.39L272.671 195.693L259.264 185.325L254.234 188.013L248.863 193.774L240.799 199.917L236.959 202.989L238.495 211.052L232.352 223.724L231.199 225.646L229.279 234.093L229.663 239.085L228.511 244.845L226.591 255.214L223.9 259.82L221.6 263.276L223.135 269.037L234.655 267.501L241.951 259.82L245.023 259.437L243.105 267.118L248.095 275.181L253.471 279.021L257.312 272.108L265.377 282.476V288.62L260.004 296.687L261.921 304.364L269.22 311.662ZM269.23 311.276L256.543 315.886L246.56 314.729L246.943 308.589L232.735 309.358L226.591 302.446L218.144 297.067L206.239 298.987L205.087 296.687L201.249 299.759L200.482 307.82L203.555 310.12L213.535 312.046L223.516 317.806L222.751 320.493L209.312 325.485L207.007 335.466L210.849 344.302L223.524 351.597L235.423 346.22L238.111 355.052L242.724 361.196H256.931L251.167 351.597L259.232 346.989L265.759 339.692L264.224 331.63L272.287 324.329L269.23 311.276Z");

    regions["SK Karlsruhe"] = map.path("M221.6 263.276L223.135 269.037L234.655 267.501L241.951 259.82L245.023 259.437L243.104 267.118L248.095 275.181L253.471 279.021L257.312 272.108L265.377 282.476V288.62L260.004 296.687L261.921 304.364L269.22 311.272L256.543 315.886L246.56 314.729L246.943 308.589L232.735 309.358L226.591 302.446L218.144 297.067L206.239 298.987L205.087 296.687L207.776 293.614L208.926 291.692L213.919 273.259L221.6 263.276Z");

    regions["Rastatt"] = map.path("M201.265 299.759L200.482 307.82L203.555 310.12L213.535 312.046L223.516 317.806L222.751 320.493L209.312 325.485L207.007 335.466L210.849 344.302L223.524 351.597L235.423 346.22L238.111 355.052L236.191 357.358L229.663 355.82L228.896 356.589L234.66 359.662L236.196 363.892L231.583 366.958L240.033 371.563L241.951 379.245L238.879 389.614L249.633 381.929L254.239 385.005L251.938 397.292L244.64 411.118L243.873 418.796L240.415 420.718L240.033 426.862L234.655 428.396L229.663 429.159L228.127 435.688L221.215 441.833L211.615 447.208L197.407 446.44L188.191 441.067L194.335 441.448L194.719 439.147L190.879 437.991L193.184 433.39L190.111 430.702L183.967 431.085L182.815 431.47L168.607 420.333L161.695 422.636L159.012 420.718L151.711 414.19L149.023 414.185L140.959 410.349L138.271 410.731L138.658 408.425L131.359 407.657V401.13L124.063 396.142L126.751 383.085L142.495 370.792L150.56 370.413L155.551 366.571L161.307 356.206L163.999 346.989L176.671 322.03L178.207 320.108L182.433 312.813L185.505 307.82L193.951 305.13L201.265 299.759ZM190.495 411.886L191.264 413.421L192.415 416.876L197.023 416.493L201.633 416.876L213.151 402.667L213.535 401.519L212.385 390.38L203.938 380.78L206.239 377.708L205.854 371.181L203.551 373.103L198.943 369.646L193.567 361.964L183.199 353.901L176.287 360.046L170.911 370.413L172.449 372.718L178.212 374.253L184.356 385.005L181.284 388.462L169.759 388.845L162.079 394.606L183.583 401.519L190.495 404.589V411.886H190.495Z");

    regions["Baden-Baden"] = map.path("M190.495 411.886L191.264 413.421L192.415 416.876L197.023 416.493L201.633 416.876L213.151 402.667L213.535 401.519L212.385 390.38L203.938 380.78L206.239 377.708L205.854 371.181L203.551 373.103L198.943 369.646L193.567 361.964L183.199 353.901L176.287 360.046L170.911 370.413L172.449 372.718L178.212 374.253L184.356 385.005L181.284 388.462L169.759 388.845L162.079 394.606L183.583 401.519L190.495 404.589V411.886Z");

    regions["Ortenaukreis"] = map.path("M124.095 396.142L106.783 416.108L94.8789 422.636L92.5752 426.856L83.3594 444.903L84.127 469.481L79.9033 476.78L74.1436 480.62L69.5352 501.741L67.6152 506.329L63.7754 519.005L66.8474 538.585L65.3115 543.19L64.543 543.96L53.4072 550.108L49.5674 566.62L49.9512 567.005L57.6309 566.235L62.6228 575.069L65.3115 574.687L65.6953 573.528L76.8308 575.831L108.319 582.749L105.631 585.437L114.463 587.741L124.063 589.657L127.52 581.591L133.663 577.759L141.726 582.749L147.1 581.214L149.796 583.13L150.943 584.286L152.095 586.2L153.633 587.741L157.858 587.358L167.076 580.446L170.525 583.519L175.135 590.046L173.6 597.724L182.433 607.325L186.653 606.558L189.726 598.876L199.325 603.103L206.239 595.804L207.007 587.358L203.551 585.819L201.249 574.687L203.551 570.458L200.868 559.319L212.383 555.485L210.468 543.964L206.239 536.667H205.087L203.167 533.216L192.415 519.003L188.959 516.702L194.335 512.093L200.095 487.913V487.528L198.177 483.308L192.033 482.925L186.655 477.165L185.505 457.97L191.648 450.671L184.352 441.446L188.191 441.067L194.335 441.448L194.719 439.147L190.879 437.991L193.184 433.39L190.111 430.702L183.967 431.085L182.815 431.47L168.607 420.333L161.695 422.636L159.012 420.718L151.711 414.19L149.023 414.185L140.959 410.349L138.271 410.731L138.658 408.425L131.359 407.657V401.13L124.095 396.142Z");

    regions["Schwarzwald-Baar-Kreis"] = map.path("M253.502 752.476L264.996 749.788L269.604 741.345L279.583 743.646L286.879 723.292L278.815 714.845L280.348 712.157L274.974 705.245L274.212 689.501L279.583 686.812L284.959 689.112L287.264 683.747L292.254 677.979L290.719 672.22L293.407 669.534L285.343 663.386L288.804 656.481L287.648 653.79L285.726 652.636L286.879 650.333L278.815 641.118L274.207 641.886L264.224 625.374L267.68 620.765L258.079 606.173L248.868 605.021L247.706 601.181L237.726 600.03L238.879 605.401L226.591 603.485L213.921 606.558L200.092 604.636L199.325 603.103L189.726 598.876L186.653 606.558L182.433 607.325L173.6 597.724L163.615 604.636V613.853L159.392 616.925L162.079 622.687L165.151 627.292L163.999 634.591L169.377 638.046L160.159 638.813L154.783 642.647L156.322 655.319L161.312 662.231V662.62L161.695 663.386L164.768 666.075L174.751 669.147L175.904 672.604L182.815 667.614L204.705 669.915L207.396 673.37L205.471 678.749L194.335 684.509L205.087 685.276L205.471 688.349L228.896 703.708L232.352 712.157L236.191 714.845L235.808 722.907L244.254 725.597V732.124H252.7L258.463 747.103L253.502 752.476Z");

    regions["Emmendingen"] = map.path("M49.5986 566.62L47.2637 575.069L38.0469 589.276L32.2871 598.493L28.0635 603.866L27.6787 611.548L21.9189 618.845L31.1348 622.687L37.6631 620.38L52.2549 621.147L52.6394 623.448L65.3115 621.151L66.8474 623.069V631.901L74.9111 632.286L83.3594 638.431L89.8867 644.958L93.3428 643.421L98.7188 644.573L104.863 643.806L106.399 647.263L107.936 640.349L130.591 642.267L138.658 643.421L150.943 651.485L157.854 662.235L161.307 662.62L161.312 662.231L156.322 655.319L154.783 642.647L160.159 638.813L169.377 638.046L163.999 634.591L165.151 627.292L162.079 622.687L159.392 616.925L163.615 613.853V604.636L173.6 597.724L175.135 590.046L170.525 583.519L167.076 580.446L157.858 587.358L153.633 587.741L152.095 586.2L150.943 584.286L149.796 583.13L147.1 581.214L141.726 582.749L133.663 577.759L127.52 581.591L124.063 589.657L114.463 587.741L105.631 585.437L108.319 582.749L76.8308 575.831L65.6953 573.528L65.3115 574.687L62.6228 575.069L57.6309 566.235L49.9512 567.005L49.5986 566.62Z");

    regions["Freiburg im Breisgau"] = map.path("M83.3594 638.431L89.8867 644.958L95.2637 658.78L101.791 661.085L107.167 659.165L108.319 659.548V669.528L105.247 678.362L106.783 688.349L102.943 696.792L96.7988 700.636L94.1113 700.632L92.5752 698.329L91.4226 692.958L96.031 684.124L89.8867 682.974L87.9668 678.364L85.2793 674.524L78.3672 676.829L73.7588 675.677L68.3828 671.837L60.3193 671.069L45.3428 678.364L41.5029 675.292L45.7275 672.22L46.1113 664.542L51.4873 659.929L54.1748 649.948L60.3193 648.792L69.1514 658.013L73.7588 651.866L76.4473 641.886L81.0547 637.657L83.3594 638.431Z");

    regions["Breisgau-Hochschwarzwald"] = map.path("M21.9346 618.845L20.7676 628.062L18.8474 649.181L30.3672 666.081L31.5195 672.989L29.2146 677.979L21.1514 687.964L20.7676 697.563L20.3828 700.253L13.8555 707.165L15.0068 720.601L6.1748 742.876L9.63087 757.847L10.7832 757.853L16.9268 746.329L27.6787 747.103L28.0635 753.63L39.1992 746.329L41.5029 748.632L49.1836 746.329L54.1748 743.642L61.0869 742.493H67.999L69.919 740.958L68.7676 737.501L74.9111 736.733L82.9756 730.591L86.0469 729.052L85.2793 725.597L88.7354 724.825L94.4951 720.985L97.1836 714.075L97.9512 709.853L121.375 715.229L129.439 716.38L129.823 724.829L130.976 724.062L139.808 718.687L145.179 722.907L149.796 738.271L156.32 740.19L164.004 751.325L170.53 750.173L172.833 760.925V761.308L173.6 759.774L177.439 755.159L180.896 740.185L177.823 733.276L183.967 732.509L182.433 729.437L189.73 727.519L192.804 722.524L221.215 727.13L235.808 722.907L236.191 714.845L232.352 712.157L228.896 703.708L205.471 688.349L205.087 685.276L194.335 684.509L205.471 678.749L207.396 673.37L204.705 669.915L182.815 667.614L175.904 672.604L174.751 669.147L164.768 666.075L161.695 663.386L161.307 662.62L157.854 662.235L150.943 651.485L138.658 643.421L130.591 642.267L107.936 640.349L106.399 647.263L104.863 643.806L98.7188 644.573L93.3428 643.421L89.8867 644.958L95.2637 658.78L101.791 661.085L107.167 659.165L108.319 659.548V669.528L105.247 678.362L106.783 688.349L102.943 696.792L96.7988 700.636L94.1113 700.632L92.5752 698.329L91.4226 692.958L96.031 684.124L89.8867 682.974L87.9668 678.364L85.2793 674.524L78.3672 676.829L73.7588 675.677L68.3828 671.837L60.3193 671.069L45.3428 678.364L41.5029 675.292L45.7275 672.22L46.1113 664.542L51.4873 659.929L54.1748 649.948L60.3193 648.792L69.1514 658.013L73.7588 651.866L76.4473 641.886L81.0547 637.657L83.3594 638.431L74.9111 632.286L66.8474 631.901V623.069L65.3115 621.151L52.6394 623.448L52.2549 621.147L37.6631 620.38L31.1348 622.687L21.9346 618.845Z");

    regions["Waldshut"] = map.path("M96.0623 819.677L98.7188 823.13L99.1035 830.813L101.791 834.271L108.703 835.804L112.159 830.431L122.144 831.579L131.743 833.12L139.423 828.896L145.951 831.196L150.56 822.364L160.543 817.759L164.387 818.519L171.295 811.614L176.671 808.919L180.127 814.687L187.036 811.229L197.407 813.917L198.56 821.979L205.471 828.124L212.382 828.509L231.583 830.431L245.796 826.591L247.711 825.052L246.56 822.751L240.799 823.905L238.495 816.993L245.791 812.765L259.232 806.62L260.383 808.157L267.295 812.765L266.529 819.292L270.365 820.06L276.129 813.53L273.823 802.78L275.743 803.935L279.199 804.702L282.271 800.093L275.743 791.646L258.079 794.718L257.695 801.241L243.871 799.319L243.104 803.935L227.743 792.796L226.207 789.724L229.279 786.651L225.823 780.892L229.279 776.667L236.572 772.062L243.871 756.702L253.471 752.476L258.463 747.103L252.7 732.124H244.254V725.597L235.808 722.903L221.215 727.13L192.804 722.524L189.73 727.519L182.433 729.437L183.967 732.509L177.823 733.276L180.896 740.185L177.439 755.159L173.6 759.774L172.833 761.308V760.925L170.53 750.173L164.004 751.325L156.32 740.19L149.796 738.271L145.179 722.907L139.808 718.687L130.976 724.062L129.823 724.829L124.831 732.509L125.215 743.646L125.6 750.173L116.768 755.548L117.919 760.925L113.312 766.302L119.071 773.214L115.615 781.272L109.855 785.501L101.023 790.108L100.255 795.872L90.6553 797.403L91.0391 800.093L91.8076 808.157L97.5674 813.917L96.0623 819.677Z");

    regions["Lörrach"] = map.path("M9.66211 757.847L8.47949 765.917L1.18359 772.829L2.71875 788.19L13.4707 799.708L18.4629 815.837L22.3027 820.446L26.1436 820.829L33.823 813.917L42.2715 814.302L39.583 818.142L43.8076 823.513L30.3672 827.358L33.0547 831.579L40.7354 838.108L52.2549 834.651L70.6875 829.661L76.8308 818.907H80.2871L96.031 819.677L97.5674 813.917L91.8076 808.157L91.0391 800.093L90.6553 797.403L100.255 795.872L101.023 790.108L109.855 785.501L115.615 781.272L119.071 773.214L113.312 766.302L117.919 760.925L116.768 755.548L125.6 750.173L125.215 743.646L124.831 732.509L129.823 724.829L129.439 716.38L121.375 715.229L97.9512 709.853L97.1836 714.075L94.4951 720.985L88.7354 724.825L85.2793 725.597L86.0469 729.052L82.9756 730.591L74.9111 736.733L68.7676 737.501L69.919 740.958L67.999 742.493H61.0869L54.1748 743.642L49.1836 746.329L41.5029 748.632L39.1992 746.329L28.0635 753.63L27.6787 747.103L16.9268 746.329L10.7832 757.853L9.66211 757.847Z");

    var bodensee = map.path("M420.927 800.856L418.399 793.486L410.543 796.253L403.399 796.486L383.149 795.486L365.6 796.636L379.034 784.349L374.811 779.358L369.818 778.591L357.146 770.524L365.98 768.989L382.879 771.677L407.453 783.196L419.743 789.343L427.649 791.736L420.896 770.524L403.999 759.769L399.007 757.466L384.804 743.646L387.104 739.036L395.167 742.876L407.455 751.708L431.264 766.687L436.64 778.204L450.079 790.493L453.151 792.413L460.063 795.485L466.207 798.558L475.808 795.866L493.087 802.392L501.151 802.774L505.375 807.774L509.983 815.837L510.367 820.446L516.492 826.585L528.785 827.741L529.937 830.813L535.695 833.118L541.071 837.724L556.815 840.419L561.044 846.935L564.883 848.854L567.187 854.228L561.039 861.526L547.986 859.226L538.387 861.913L519.187 862.298L515.347 866.519L497.312 865.368L486.56 859.226V852.313L475.041 843.866L473.505 833.112L460.831 826.585L453.535 818.903L420.927 800.856Z");

    var border = map.path("M528.78 827.743L533.39 828.124L535.312 824.669L539.151 825.437L538.387 820.442L551.44 818.142L554.508 821.214L560.655 819.292L562.575 816.604L566.031 820.829L578.703 805.847L577.169 804.313L587.535 794.712L599.055 794.329L602.508 798.558L609.036 800.093L612.495 802.013H621.329L628.623 792.03L633.615 790.493L644.751 792.03L648.976 807.39L653.588 797.79L662.42 793.563L664.723 783.196L658.956 777.431L658.189 770.519L659.343 764.765L646.287 753.245L652.815 746.718H658.959L663.951 742.493L662.799 739.421L657.42 732.124L655.119 722.524L650.513 726.364L648.976 721.759H652.815L656.271 717.917L657.041 703.708V702.558L657.423 695.646L650.891 688.349L652.042 683.358L656.271 681.819L658.575 681.437L659.729 670.687L663.185 666.075L663.568 663.774L662.799 662.235L665.104 647.646L664.721 636.509L664.719 634.974L663.951 631.519L657.036 623.452L656.655 622.687L653.199 610.78L650.513 598.108L650.896 595.421V595.036L645.521 584.286L646.287 576.989L645.135 570.075L645.901 566.62L638.993 557.786L632.079 544.353L629.007 541.276L623.631 535.901L622.096 530.142L639.759 511.325L637.455 501.358L643.6 502.124L655.116 494.062L662.799 501.741L671.242 500.2L680.076 491.368L683.916 489.071L685.841 489.067L689.68 487.913L688.527 484.845L687.759 482.925L686.989 481.005L695.44 477.548L698.896 478.702L707.343 476.392L704.655 471.021L706.189 466.03L708.108 463.724L705.808 454.124L703.503 451.431V446.058L708.879 445.677L709.643 444.142L702.736 434.542L693.901 426.093L693.135 417.642L696.59 415.341L696.595 411.886L708.113 416.493L708.879 414.19H713.104L716.56 425.325L719.247 427.245L726.159 422.253L726.928 414.573L730.764 410.349L736.529 409.964L738.441 412.651L731.53 424.558L744.975 420.718L751.502 413.421L750.348 411.118L742.285 398.829L744.592 396.142L734.604 393.067L733.455 381.548L735.377 380.396L735.762 372.333L738.832 369.646L740.367 368.493V360.431L734.99 358.509L735.762 355.437L741.521 352.364V344.687L739.986 343.528L741.521 338.542L734.224 332.019L741.521 329.325L739.215 318.19L733.071 312.813L732.688 309.358L729.231 310.124L728.843 308.974L731.535 305.513L723.471 302.058L721.169 296.302L716.561 295.917L715.794 287.085L711.568 285.548L708.495 288.235L707.343 287.085L693.135 281.708L692.751 275.181L694.671 274.413L691.215 262.892L679.695 261.358L692.751 249.452L690.447 242.157L686.224 238.702L673.936 229.485L671.631 231.021L661.264 224.493L660.879 220.267L658.959 205.292L661.264 204.142L657.808 201.068L659.728 194.919L662.415 199.528L667.023 192.231L662.415 186.856L661.647 183.403L662.028 174.958L659.728 176.109L655.887 173.421L657.041 153.837L667.79 152.302L668.943 149.614L666.641 147.693L663.568 138.856L658.189 120.813L653.964 115.82L656.267 110.058L651.274 96.2315L649.743 94.3176L644.369 93.9348L638.994 99.6963L640.532 101.236L644.365 103.534L633.999 116.589L622.863 117.359L623.631 116.206L619.41 116.589H612.111L608.658 113.134L610.959 106.989L611.343 96.2356L610.189 90.4758L604.815 87.4053L607.887 80.1086L605.58 78.5732L599.055 81.2627L595.215 93.165L583.695 89.708L585.615 87.79L587.535 86.6318L590.607 82.7922L598.287 68.5852L596.751 63.5908L587.54 50.1572L586.387 48.2356L590.224 42.4758L589.841 41.7082L586.385 32.1086L580.237 27.886L580.623 24.0459L569.487 31.7236L563.343 40.5576L559.502 25.5791L551.059 29.4209V37.8662L547.603 39.7844L538.769 34.4131L540.303 29.0322L542.607 26.7295L542.989 16.7471L541.841 14.8291L544.908 10.9893L544.532 1.38599L522.641 5.99121L524.943 16.7532L523.023 18.6709L511.505 11.374L509.983 2.91919L503.839 2.54224L499.227 9.07129L495.392 7.91724L492.319 2.15723L485.791 5.99121L481.568 8.68652L478.495 5.99121L474.271 7.91724L463.52 9.45239L465.435 18.6709L458.911 19.8196L465.439 23.2766L472.352 22.8918L477.728 24.4307L470.427 27.886L473.5 33.6455L479.647 33.2627L480.415 23.2803L485.791 27.1184L488.863 32.4934V38.636L485.407 42.8623L483.104 45.5478L486.56 48.6201L488.479 50.5422L485.407 55.5322L479.648 56.6865L475.812 51.3076L470.049 55.9172L461.986 52.0774L460.447 51.6926L456.224 57.8369L452.383 59.374L449.312 74.7295H447.011L444.708 79.3408H442.399L440.863 80.1086L433.562 82.0303L411.295 80.1086L410.529 86.2532L403.999 80.8782L403.231 85.4912L407.071 92.3919L413.979 96.6201L416.282 103.147L411.675 105.448L406.305 99.3076L405.921 99.6926L401.69 97.7744L400.159 100.456L395.936 109.677H389.407L382.495 105.068L378.271 108.142L374.044 106.601L375.586 110.44L369.059 119.657L373.663 125.421L367.135 130.03L361.759 129.263L359.839 136.943L356.769 140.013L348.7 147.687L340.255 146.919L336.801 141.548L345.246 135.021L344.479 124.649L342.56 122.349L349.471 114.667L352.932 121.964L361.377 114.286L361.374 107.374L351.007 108.142L344.479 110.443L342.177 107.759L342.943 99.3076L338.335 99.6926L334.879 102.765L330.653 101.229L328.751 102.38L313.372 94.7024L314.525 90.093L311.071 87.0205L309.151 75.1184L312.991 70.509L311.839 61.2922L288.415 65.9016L287.648 67.4365L286.495 68.2024L287.264 72.8135L289.567 72.0459L293.407 90.093L283.808 99.6926L274.207 96.6201L263.071 79.3408L255.771 73.1904L245.807 75.1184L245.407 79.343L243.487 85.1028L245.407 90.8623L250.016 109.29L249.249 124.652L256.931 127.722L264.991 130.03L262.688 140.013L262.305 141.163V141.929V142.702V143.466L254.623 148.841L254.239 152.298L256.931 153.831L263.071 148.456L261.151 160.364L255.392 166.509L251.936 169.579L251.167 175.347L258.468 179.57L259.232 185.325L254.234 188.013L248.863 193.774L240.799 199.917L236.959 202.989L238.495 211.052L232.352 223.724L231.199 225.646L229.279 234.093L229.663 239.085L228.511 244.845L226.591 255.214L223.9 259.82L221.6 263.276L213.919 273.259L208.926 291.692L207.776 293.614L205.087 296.687L201.249 299.759L193.951 305.13L185.505 307.82L182.433 312.813L178.207 320.108L176.671 322.03L163.999 346.989L161.307 356.206L155.551 366.571L150.56 370.413L142.495 370.792L126.751 383.085L124.063 396.142L106.783 416.108L94.8789 422.636L92.5752 426.856L83.3594 444.903L84.127 469.481L79.9033 476.78L74.1435 480.62L69.5352 501.741L67.6152 506.329L63.7754 519.005L66.8474 538.585L65.3115 543.19L64.543 543.96L53.4072 550.108L49.5674 566.62L47.2637 575.069L38.0469 589.276L32.2871 598.493L28.0635 603.866L27.6787 611.548L21.919 618.845L20.7676 628.062L18.8474 649.181L30.3672 666.081L31.5195 672.989L29.2146 677.979L21.1514 687.964L20.7676 697.563L20.3828 700.253L13.8555 707.165L15.0068 720.601L6.1748 742.876L9.63086 757.847L8.47949 765.917L1.18359 772.829L2.71875 788.19L13.4707 799.708L18.4629 815.837L22.3027 820.446L26.1436 820.829L33.823 813.917L42.2715 814.302L39.583 818.142L43.8076 823.513L30.3672 827.358L33.0547 831.579L40.7354 838.108L52.2549 834.651L70.6875 829.661L76.8308 818.907H80.2871L96.031 819.677L98.7188 823.13L99.1035 830.813L101.791 834.271L108.703 835.804L112.159 830.431L122.144 831.579L131.743 833.12L139.423 828.896L145.951 831.196L150.56 822.364L160.543 817.759L164.387 818.519L171.295 811.614L176.671 808.919L180.127 814.687L187.036 811.229L197.407 813.917L198.56 821.979L205.471 828.124L212.382 828.509L231.583 830.431L245.796 826.591L247.711 825.052L246.56 822.751L240.799 823.905L238.495 816.993L245.791 812.765L259.232 806.62L260.383 808.157L267.295 812.765L266.529 819.292L270.365 820.06L276.129 813.53L273.823 802.78L275.743 803.935L279.199 804.702L282.271 800.093L275.743 791.646L258.079 794.718L257.695 801.241L243.871 799.319L243.104 803.935L227.743 792.796L226.207 789.724L229.279 786.651L225.823 780.892L229.279 776.667L236.572 772.062L243.871 756.702L253.471 752.476L264.996 749.788L269.604 741.345L279.583 743.646L283.039 759.005L288.033 756.317L291.487 745.563L298.399 754.013L304.543 757.47L311.071 762.075L303.771 770.519L309.914 775.897L307.62 784.733L324.9 791.263L328.356 784.733L324.13 780.509L318.367 779.358L319.135 775.134L327.967 767.837L331.039 777.052L338.34 780.892L344.096 780.509L344.479 780.892L339.104 783.192L338.721 789.343L345.249 799.321L350.623 802.015L365.6 796.638");

    var style = {
        fill: "#ddd",
        stroke: "#000000",
        "stroke-width": 1,
        "stroke-linejoin": "round",
        cursor: "pointer"
    };

    var bodenseeStyle = {
        fill: "#5c81b2",
        stroke: "#0000FF",
        "stroke-width": 2,
        "stroke-linejoin": "round",
        cursor: "not-allowed",

    };

    var borderStyle = {
        stroke: "#000000",
        "stroke-width": 3
    };

    var hoverStyle = {
        fill: "#A8BED5"
    }

    var clickStyle = {
        fill: "#000000"
    }

    border.attr(borderStyle);
    bodensee.attr(bodenseeStyle);

    var animationSpeed = 500;
    var clickedField = "";

    for (var regionName in regions) {
        (function (region, name) {
            if (clickedField == name) {
                region.attr(clickStyle);
            } else {
                region.attr(style);
            }

            region[0].addEventListener("mouseover", function () {
                region.animate(hoverStyle, animationSpeed);
            }, true);

            region[0].addEventListener("mouseout", function () {
                if (name != clickedField) {
                    region.animate(style, animationSpeed);
                }
            }, true);

            region[0].addEventListener("click", function () {
                clickedField = name;

                for (var regionName in regions) {
                    if (regionName != clickedField) {
                        regions[regionName].animate(style, animationSpeed);
                    }
                }

                onClicked(region, name);
            }, true);

        })(regions[regionName], regionName);
    }
}

map();

var locked = false;
async function onClicked(region, name) {
    if (locked) return;
    locked = true;

    reset();
    document.getElementById("diagrams").style = "display: block;";

    var data = await fetch("/data/district?district=" + name);
    var json = JSON.parse(await data.text());

    var texts = document.getElementsByClassName("loading");

    for (var i = 0; i < texts.length; i++) {
        texts[i].style = "display: none;";
    }

    document.getElementById("hinweis").style = "display: none; align-items: center; justify-content: center;";

    fillCharts(name, json);
    fillContainer(name);

    locked = false;
}

async function fillContainer(name) {
    var tmp = {
        infizierte: "",
        genesen: "",
        geimpft: "",
        immun: "",
        tode: ""
    };

    document.getElementById("replaceContent").innerText = "Infizierte: Loading...\nGenesen: Loading...\nGeimpft: Loading...\nImmun: Loading...\nTodesfälle: Loading...";

    var overview = await getOverview(name);
    tmp.infizierte = overview.infizierte;
    tmp.genesen = overview.genesen;
    tmp.geimpft = overview.geimpft;
    tmp.immun = overview.immun;
    tmp.tode = overview.todesfaelle;

    var header = document.getElementById("replaceHeader");
    header.innerText = "Aktuelle Zahlen vom Landkreis: " + name;

    var content = document.getElementById("replaceContent");
    content.innerText = "Infizierte: " + tmp.infizierte + "\nGenesen: " + tmp.genesen + "\nGeimpft: " + tmp.geimpft + "\nImmun: " + tmp.immun + "\nTodesfälle: " + tmp.tode;
}

async function getOverview(district) {
    var query = "";
    if (district != undefined) {
        query = "?district=" + district;
    }

    var response = await fetch('/data/overview' + query);
    if (response.status != 200) return undefined;

    var result = await response.text();
    var json = JSON.parse(result);

    return json;
}

function reset() {
    document.getElementById("diagrams").style = "display: none;";
    document.getElementById("hinweis").style = "display: flex; align-items: center; justify-content: center;";
    resetCharts();
    resetTables();
}

function resetCharts() {
    var texts = document.getElementsByClassName("loading");

    for (var i = 0; i < texts.length; i++) {
        texts[i].style = "display: block;";
    }

    document.getElementById("deaths").outerHTML = '<canvas id="deaths"></canvas>';
    document.getElementById("infected").outerHTML = '<canvas id="infected"></canvas>';
    document.getElementById("vaccinated").outerHTML = '<canvas id="vaccinated"></canvas>';
    document.getElementById("genderDeaths").outerHTML = '<canvas id="genderDeaths"></canvas>';
    document.getElementById("genderCases").outerHTML = '<canvas id="genderCases"></canvas>';
    document.getElementById("altersgruppenDeaths").outerHTML = '<canvas id="altersgruppenDeaths"></canvas>';
    document.getElementById("altersgruppenCases").outerHTML = '<canvas id="altersgruppenCases"></canvas>';
    document.getElementById("agesInfected").outerHTML = '<canvas id="agesInfected"></canvas>';
    document.getElementById("agesDeaths").outerHTML = '<canvas id="agesDeaths"></canvas>';
    document.getElementById("recovered").outerHTML = '<canvas id="recovered"></canvas>';
}

function resetTables() {
    document.getElementById("tabelleTote").innerHTML = "";
    document.getElementById("tabelleInfected").innerHTML = "";
    document.getElementById("tabelleVaccinated").innerHTML = "";
    document.getElementById("tabelleVaccinated").innerHTML = "";
}

function fillCharts(name, json) {
    var dataW = [];
    for (var i = 0; i < json.Weiblich_perWeek.length; i++) {
        var tmp = {};

        var date = new Date(json.Weiblich_perWeek[i].date);
        tmp.month = date.getUTCMonth() + 1;
        tmp.year = date.getUTCFullYear();
        tmp.deaths = json.Weiblich_perWeek[i].deaths;
        tmp.cases = json.Weiblich_perWeek[i].cases;
        tmp.recovered = json.Weiblich_perWeek[i].recovered;

        var found = false;
        for (var j = 0; j < dataW.length; j++) {
            if (dataW[j].month == tmp.month && dataW[j].year == tmp.year) {
                dataW[j].deaths = dataW[j].deaths + tmp.deaths;
                dataW[j].cases = dataW[j].cases + tmp.cases;
                dataW[j].recovered = dataW[j].recovered + tmp.recovered;

                found = true;
                break;
            }
        }

        if (!found) dataW.push(tmp);
    }

    dataW.reverse();

    var dataM = [];
    for (var i = 0; i < json.Männlich_perWeek.length; i++) {
        var tmp = {};

        var date = new Date(json.Männlich_perWeek[i].date);
        tmp.month = date.getUTCMonth() + 1;
        tmp.year = date.getUTCFullYear();
        tmp.deaths = json.Männlich_perWeek[i].deaths;
        tmp.cases = json.Männlich_perWeek[i].cases;
        tmp.recovered = json.Männlich_perWeek[i].recovered;

        var found = false;
        for (var j = 0; j < dataM.length; j++) {
            if (dataM[j].month == tmp.month && dataM[j].year == tmp.year) {
                dataM[j].deaths = dataM[j].deaths + tmp.deaths;
                dataM[j].cases = dataM[j].cases + tmp.cases;
                dataM[j].recovered = dataM[j].recovered + tmp.recovered;

                found = true;
                break;
            }
        }

        if (!found) dataM.push(tmp);
    }

    dataM.reverse();

    var dataVaccinated = [];
    for (var i = 0; i < json.Geimpte_per_Week.length; i++) {
        var tmp = {};

        var date = new Date(json.Geimpte_per_Week[i].date);
        tmp.month = date.getUTCMonth() + 1;
        tmp.year = date.getUTCFullYear();
        tmp.anzahl = json.Geimpte_per_Week[i].anzahl;

        var found = false;
        for (var j = 0; j < dataVaccinated.length; j++) {
            if (dataVaccinated[j].month == tmp.month && dataVaccinated[j].year == tmp.year) {
                dataVaccinated[j].anzahl = dataVaccinated[j].anzahl + tmp.anzahl;
                found = true;
                break;
            }
        }

        if (!found) dataVaccinated.push(tmp);
    }

    dataVaccinated.reverse();
    fillTableVaccinated(dataVaccinated);

    var vaccLabels = getLabels(dataVaccinated);
    var labelsW = getLabels(dataW);
    var labelsM = getLabels(dataM);

    var labels;
    if (labelsM.length < labelsW.length) {
        labels = labelsW;
    } else {
        labels = labelsM;
    }

    var dataPointsToteW = [];
    for (var i = 0; i < dataM.length - dataW.length; i++) {
        dataPointsToteW.push(0);
    }
    for (var i = 0; i < dataW.length; i++) {
        dataPointsToteW.push(dataW[i].deaths);
    }

    var dataPointsToteM = [];
    for (var i = 0; i < dataW.length - dataM.length; i++) {
        dataPointsToteM.push(0);
    }
    for (var i = 0; i < dataM.length; i++) {
        dataPointsToteM.push(dataM[i].deaths);
    }

    var dataPointsToteG = [];
    for (var i = 0; i < dataPointsToteM.length; i++) {
        dataPointsToteG.push(dataPointsToteM[i] + dataPointsToteW[i]);
    }

    fillTableTote(dataPointsToteW, dataPointsToteM, dataPointsToteG);

    const deaths = {
        labels: labels,
        datasets: [{
            label: 'Männlich',
            backgroundColor: 'rgb(255, 255, 132)',
            borderColor: 'rgb(255, 255, 132)',
            data: dataPointsToteM,
        }, {
            label: 'Weiblich',
            backgroundColor: 'rgb(255, 99, 132)',
            borderColor: 'rgb(255, 99, 132)',
            data: dataPointsToteW,
        }, {
            label: 'Gesamt',
            backgroundColor: 'rgb(0, 200, 255)',
            borderColor: 'rgb(0, 200, 255)',
            data: dataPointsToteG,
        }]
    };

    var dataPointsInfectedW = [];
    for (var i = 0; i < dataM.length - dataW.length; i++) {
        dataPointsInfectedW.push(0);
    }
    for (var i = 0; i < dataW.length; i++) {
        dataPointsInfectedW.push(dataW[i].cases);
    }

    var dataPointsInfectedM = [];
    for (var i = 0; i < dataW.length - dataM.length; i++) {
        dataPointsInfectedM.push(0);
    }
    for (var i = 0; i < dataM.length; i++) {
        dataPointsInfectedM.push(dataM[i].cases);
    }

    var dataPointsInfectedG = [];
    for (var i = 0; i < dataPointsInfectedM.length; i++) {
        dataPointsInfectedG.push(dataPointsInfectedM[i] + dataPointsInfectedW[i]);
    }

    fillTableInfected(dataPointsInfectedW, dataPointsInfectedM, dataPointsInfectedG);

    const infected = {
        labels: labelsW,
        datasets: [{
            label: 'Männlich',
            backgroundColor: 'rgb(255, 255, 132)',
            borderColor: 'rgb(255, 255, 132)',
            data: dataPointsInfectedM,
        }, {
            label: 'Weiblich',
            backgroundColor: 'rgb(255, 99, 132)',
            borderColor: 'rgb(255, 99, 132)',
            data: dataPointsInfectedW,
        }, {
            label: 'Gesamt',
            backgroundColor: 'rgb(0, 200, 255)',
            borderColor: 'rgb(0, 200, 255)',
            data: dataPointsInfectedG,
        }]
    };

    var dataPointsRecoveredW = [];
    for (var i = 0; i < dataM.length - dataW.length; i++) {
        dataPointsRecoveredW.push(0);
    }
    for (var i = 0; i < dataW.length; i++) {
        dataPointsRecoveredW.push(dataW[i].recovered);
    }

    var dataPointsRecoveredM = [];
    for (var i = 0; i < dataW.length - dataM.length; i++) {
        dataPointsRecoveredM.push(0);
    }
    for (var i = 0; i < dataM.length; i++) {
        dataPointsRecoveredM.push(dataM[i].recovered);
    }

    var dataPointsRecoveredG = [];
    for (var i = 0; i < dataPointsRecoveredM.length; i++) {
        dataPointsRecoveredG.push(dataPointsRecoveredM[i] + dataPointsRecoveredW[i]);
    }

    fillTableRecovered(dataPointsRecoveredW, dataPointsRecoveredM, dataPointsRecoveredG);

    const recovered = {
        labels: labelsW,
        datasets: [{
            label: 'Männlich',
            backgroundColor: 'rgb(255, 255, 132)',
            borderColor: 'rgb(255, 255, 132)',
            data: dataPointsRecoveredM,
        }, {
            label: 'Weiblich',
            backgroundColor: 'rgb(255, 99, 132)',
            borderColor: 'rgb(255, 99, 132)',
            data: dataPointsRecoveredW,
        }, {
            label: 'Gesamt',
            backgroundColor: 'rgb(0, 200, 255)',
            borderColor: 'rgb(0, 200, 255)',
            data: dataPointsRecoveredG,
        }]
    };

    var dataPointsVaccinated = [];
    for (var i = 0; i < dataVaccinated.length; i++) {
        dataPointsVaccinated.push(dataVaccinated[i].anzahl);
    }

    const vaccinated = {
        labels: vaccLabels,
        datasets: [{
            label: 'Geimpft',
            backgroundColor: 'rgb(255, 99, 132)',
            borderColor: 'rgb(255, 99, 132)',
            data: dataPointsVaccinated,
        }]
    };

    var toteGesamtM = 0;
    for (var i = 0; i < dataM.length; i++) {
        toteGesamtM = toteGesamtM + dataM[i].deaths;
    }

    var toteGesamtW = 0;
    for (var i = 0; i < dataW.length; i++) {
        toteGesamtW = toteGesamtW + dataW[i].deaths;
    }

    const genderDeaths = {
        labels: ["Männlich", "Weiblich"],
        datasets: [{
            label: 'Gender ' + name,
            backgroundColor: ['rgb(255, 99, 132)', 'rgb(123, 12, 231)'],
            borderColor: ['rgb(255, 99, 132)', 'rgb(123, 12, 231)'],
            data: [toteGesamtM, toteGesamtW],
        }]
    };

    var casesGesamtM = 0;
    for (var i = 0; i < dataM.length; i++) {
        casesGesamtM = casesGesamtM + dataM[i].cases;
    }

    var casesGesamtW = 0;
    for (var i = 0; i < dataW.length; i++) {
        casesGesamtW = casesGesamtW + dataW[i].cases;
    }

    const genderCases = {
        labels: ["Männlich", "Weiblich"],
        datasets: [{
            label: 'Gender ' + name,
            backgroundColor: ['rgb(255, 99, 132)', 'rgb(123, 12, 231)'],
            borderColor: ['rgb(255, 99, 132)', 'rgb(123, 12, 231)'],
            data: [casesGesamtM, casesGesamtW],
        }]
    };

    var alter00_04 = [];
    for (var i = 0; i < json["Alter00-04_perWeek"].length; i++) {
        var tmp = {};

        var date = new Date(json["Alter00-04_perWeek"][i].date);
        tmp.month = date.getUTCMonth() + 1;
        tmp.year = date.getUTCFullYear();
        tmp.deaths = json["Alter00-04_perWeek"][i].deaths;
        tmp.cases = json["Alter00-04_perWeek"][i].cases;
        tmp.recovered = json["Alter00-04_perWeek"][i].recovered;

        var found = false;
        for (var j = 0; j < alter00_04.length; j++) {
            if (alter00_04[j].month == tmp.month && alter00_04[j].year == tmp.year) {
                alter00_04[j].deaths = alter00_04[j].deaths + tmp.deaths;
                alter00_04[j].cases = alter00_04[j].cases + tmp.cases;
                alter00_04[j].recovered = alter00_04[j].recovered + tmp.recovered;

                found = true;
                break;
            }
        }

        if (!found) alter00_04.push(tmp);
    }

    var alter05_14 = [];
    for (var i = 0; i < json["Alter05-14:perWeek"].length; i++) {
        var tmp = {};

        var date = new Date(json["Alter05-14:perWeek"][i].date);
        tmp.month = date.getUTCMonth() + 1;
        tmp.year = date.getUTCFullYear();
        tmp.deaths = json["Alter05-14:perWeek"][i].deaths;
        tmp.cases = json["Alter05-14:perWeek"][i].cases;
        tmp.recovered = json["Alter05-14:perWeek"][i].recovered;

        var found = false;
        for (var j = 0; j < alter05_14.length; j++) {
            if (alter05_14[j].month == tmp.month && alter05_14[j].year == tmp.year) {
                alter05_14[j].deaths = alter05_14[j].deaths + tmp.deaths;
                alter05_14[j].cases = alter05_14[j].cases + tmp.cases;
                alter05_14[j].recovered = alter05_14[j].recovered + tmp.recovered;

                found = true;
                break;
            }
        }

        if (!found) alter05_14.push(tmp);
    }

    var alter15_34 = [];
    for (var i = 0; i < json["Alter15-34_perWeek"].length; i++) {
        var tmp = {};

        var date = new Date(json["Alter15-34_perWeek"][i].date);
        tmp.month = date.getUTCMonth() + 1;
        tmp.year = date.getUTCFullYear();
        tmp.deaths = json["Alter15-34_perWeek"][i].deaths;
        tmp.cases = json["Alter15-34_perWeek"][i].cases;
        tmp.recovered = json["Alter15-34_perWeek"][i].recovered;

        var found = false;
        for (var j = 0; j < alter15_34.length; j++) {
            if (alter15_34[j].month == tmp.month && alter15_34[j].year == tmp.year) {
                alter15_34[j].deaths = alter15_34[j].deaths + tmp.deaths;
                alter15_34[j].cases = alter15_34[j].cases + tmp.cases;
                alter15_34[j].recovered = alter15_34[j].recovered + tmp.recovered;

                found = true;
                break;
            }
        }

        if (!found) alter15_34.push(tmp);
    }

    var alter35_59 = [];
    for (var i = 0; i < json["Alter35-59_perWeek"].length; i++) {
        var tmp = {};

        var date = new Date(json["Alter35-59_perWeek"][i].date);
        tmp.month = date.getUTCMonth() + 1;
        tmp.year = date.getUTCFullYear();
        tmp.deaths = json["Alter35-59_perWeek"][i].deaths;
        tmp.cases = json["Alter35-59_perWeek"][i].cases;
        tmp.recovered = json["Alter35-59_perWeek"][i].recovered;

        var found = false;
        for (var j = 0; j < alter35_59.length; j++) {
            if (alter35_59[j].month == tmp.month && alter35_59[j].year == tmp.year) {
                alter35_59[j].deaths = alter35_59[j].deaths + tmp.deaths;
                alter35_59[j].cases = alter35_59[j].cases + tmp.cases;
                alter35_59[j].recovered = alter35_59[j].recovered + tmp.recovered;

                found = true;
                break;
            }
        }

        if (!found) alter35_59.push(tmp);
    }

    var alter60_79 = [];
    for (var i = 0; i < json["Alter60-79_perWeek"].length; i++) {
        var tmp = {};

        var date = new Date(json["Alter60-79_perWeek"][i].date);
        tmp.month = date.getUTCMonth() + 1;
        tmp.year = date.getUTCFullYear();
        tmp.deaths = json["Alter60-79_perWeek"][i].deaths;
        tmp.cases = json["Alter60-79_perWeek"][i].cases;
        tmp.recovered = json["Alter60-79_perWeek"][i].recovered;

        var found = false;
        for (var j = 0; j < alter60_79.length; j++) {
            if (alter60_79[j].month == tmp.month && alter60_79[j].year == tmp.year) {
                alter60_79[j].deaths = alter60_79[j].deaths + tmp.deaths;
                alter60_79[j].cases = alter60_79[j].cases + tmp.cases;
                alter60_79[j].recovered = alter60_79[j].recovered + tmp.recovered;

                found = true;
                break;
            }
        }

        if (!found) alter60_79.push(tmp);
    }

    var alter80Plus = [];
    for (var i = 0; i < json["Alter80+_perWeek"].length; i++) {
        var tmp = {};

        var date = new Date(json["Alter80+_perWeek"][i].date);
        tmp.month = date.getUTCMonth() + 1;
        tmp.year = date.getUTCFullYear();
        tmp.deaths = json["Alter80+_perWeek"][i].deaths;
        tmp.cases = json["Alter80+_perWeek"][i].cases;
        tmp.recovered = json["Alter80+_perWeek"][i].recovered;

        var found = false;
        for (var j = 0; j < alter80Plus.length; j++) {
            if (alter80Plus[j].month == tmp.month && alter80Plus[j].year == tmp.year) {
                alter80Plus[j].deaths = alter80Plus[j].deaths + tmp.deaths;
                alter80Plus[j].cases = alter80Plus[j].cases + tmp.cases;
                alter80Plus[j].recovered = alter80Plus[j].recovered + tmp.recovered;

                found = true;
                break;
            }
        }

        if (!found) alter80Plus.push(tmp);
    }


    var gesamtDeaths00_04 = 0;
    for (var i = 0; i < alter00_04.length; i++) {
        gesamtDeaths00_04 = gesamtDeaths00_04 + alter00_04[i].deaths;
    }

    var gesamtDeaths05_14 = 0;
    for (var i = 0; i < alter05_14.length; i++) {
        gesamtDeaths05_14 = gesamtDeaths05_14 + alter05_14[i].deaths;
    }

    var gesamtDeaths15_34 = 0;
    for (var i = 0; i < alter15_34.length; i++) {
        gesamtDeaths15_34 = gesamtDeaths15_34 + alter15_34[i].deaths;
    }

    var gesamtDeaths35_59 = 0;
    for (var i = 0; i < alter35_59.length; i++) {
        gesamtDeaths35_59 = gesamtDeaths35_59 + alter35_59[i].deaths;
    }

    var gesamtDeaths60_79 = 0;
    for (var i = 0; i < alter60_79.length; i++) {
        gesamtDeaths60_79 = gesamtDeaths60_79 + alter60_79[i].deaths;
    }

    var gesamtDeaths80Plus = 0;
    for (var i = 0; i < alter80Plus.length; i++) {
        gesamtDeaths80Plus = gesamtDeaths80Plus + alter80Plus[i].deaths;
    }

    const altersgruppenDeaths = {
        labels: ["0-4", "5-14", "15-34", "35-59", "60-79", "80+"],
        datasets: [{
            label: 'Gender ' + name,
            backgroundColor: ['rgb(255, 99, 132)', 'rgb(123, 12, 231)', 'rgb(123, 45, 123)', 'rgb(45, 255, 43)', 'rgb(255, 54, 255)', 'rgb(128, 255, 230)'],
            borderColor: ['rgb(255, 99, 132)', 'rgb(123, 12, 231)', 'rgb(123, 45, 123)', 'rgb(45, 255, 43)', 'rgb(255, 54, 255)', 'rgb(128, 255, 230)'],
            data: [gesamtDeaths00_04, gesamtDeaths05_14, gesamtDeaths15_34, gesamtDeaths35_59, gesamtDeaths60_79, gesamtDeaths80Plus],
        }]
    };

    var gesamtCases00_04 = 0;
    for (var i = 0; i < alter00_04.length; i++) {
        gesamtCases00_04 = gesamtCases00_04 + alter00_04[i].cases;
    }

    var gesamtCases05_14 = 0;
    for (var i = 0; i < alter05_14.length; i++) {
        gesamtCases05_14 = gesamtCases05_14 + alter05_14[i].cases;
    }

    var gesamtCases15_34 = 0;
    for (var i = 0; i < alter15_34.length; i++) {
        gesamtCases15_34 = gesamtCases15_34 + alter15_34[i].cases;
    }

    var gesamtCases35_59 = 0;
    for (var i = 0; i < alter35_59.length; i++) {
        gesamtCases35_59 = gesamtCases35_59 + alter35_59[i].cases;
    }

    var gesamtCases60_79 = 0;
    for (var i = 0; i < alter60_79.length; i++) {
        gesamtCases60_79 = gesamtCases60_79 + alter60_79[i].cases;
    }

    var gesamtCases80Plus = 0;
    for (var i = 0; i < alter80Plus.length; i++) {
        gesamtCases80Plus = gesamtCases80Plus + alter80Plus[i].cases;
    }

    const altersgruppenCases = {
        labels: ["0-4", "5-14", "15-34", "35-59", "60-79", "80+"],
        datasets: [{
            label: 'Gender ' + name,
            backgroundColor: ['rgb(255, 99, 132)', 'rgb(123, 12, 231)', 'rgb(123, 45, 123)', 'rgb(45, 255, 43)', 'rgb(255, 54, 255)', 'rgb(128, 255, 230)'],
            borderColor: ['rgb(255, 99, 132)', 'rgb(123, 12, 231)', 'rgb(123, 45, 123)', 'rgb(45, 255, 43)', 'rgb(255, 54, 255)', 'rgb(128, 255, 230)'],
            data: [gesamtCases00_04, gesamtCases05_14, gesamtCases15_34, gesamtCases35_59, gesamtCases60_79, gesamtCases80Plus],
        }]
    };

    var dataPointsAges00_04Infected = [];
    for (var j = 0; j < dataW.length; j++) {
        var found = false;
        for (var i = 0; i < alter00_04.length; i++) {
            if (dataW[j].month == alter00_04[i].month && dataW[j].year == alter00_04[i].year) {
                found = true;
                dataPointsAges00_04Infected.push(alter00_04[i].cases);
                break;
            }
        }

        if (!found) {
            dataPointsAges00_04Infected.push(0);
        }
    }

    var dataPointsAges05_14Infected = [];
    for (var j = 0; j < dataW.length; j++) {
        var found = false;
        for (var i = 0; i < alter05_14.length; i++) {
            if (dataW[j].month == alter05_14[i].month && dataW[j].year == alter05_14[i].year) {
                found = true;
                dataPointsAges05_14Infected.push(alter05_14[i].cases);
                break;
            }
        }

        if (!found) {
            dataPointsAges05_14Infected.push(0);
        }
    }

    var dataPointsAges15_34Infected = [];
    for (var j = 0; j < dataW.length; j++) {
        var found = false;
        for (var i = 0; i < alter15_34.length; i++) {
            if (dataW[j].month == alter15_34[i].month && dataW[j].year == alter15_34[i].year) {
                found = true;
                dataPointsAges15_34Infected.push(alter15_34[i].cases);
                break;
            }
        }

        if (!found) {
            dataPointsAges15_34Infected.push(0);
        }
    }

    var dataPointsAges35_59Infected = [];
    for (var j = 0; j < dataW.length; j++) {
        var found = false;
        for (var i = 0; i < alter35_59.length; i++) {
            if (dataW[j].month == alter35_59[i].month && dataW[j].year == alter35_59[i].year) {
                found = true;
                dataPointsAges35_59Infected.push(alter35_59[i].cases);
                break;
            }
        }

        if (!found) {
            dataPointsAges35_59Infected.push(0);
        }
    }

    var dataPointsAges60_79Infected = [];
    for (var j = 0; j < dataW.length; j++) {
        var found = false;
        for (var i = 0; i < alter60_79.length; i++) {
            if (dataW[j].month == alter60_79[i].month && dataW[j].year == alter60_79[i].year) {
                found = true;
                dataPointsAges60_79Infected.push(alter60_79[i].cases);
                break;
            }
        }

        if (!found) {
            dataPointsAges60_79Infected.push(0);
        }
    }

    var dataPointsAges80PlusInfected = [];
    for (var j = 0; j < dataW.length; j++) {
        var found = false;
        for (var i = 0; i < alter80Plus.length; i++) {
            if (dataW[j].month == alter80Plus[i].month && dataW[j].year == alter80Plus[i].year) {
                found = true;
                dataPointsAges80PlusInfected.push(alter80Plus[i].cases);
                break;
            }
        }

        if (!found) {
            dataPointsAges80PlusInfected.push(0);
        }
    }

    const agesInfected = {
        labels: labelsW,
        datasets: [{
            label: '0-4',
            backgroundColor: 'rgb(255, 99, 132)',
            borderColor: 'rgb(255, 99, 132)',
            data: dataPointsAges00_04Infected,
        }, {
            label: '5-14',
            backgroundColor: 'rgb(123, 12, 231)',
            borderColor: 'rgb(123, 12, 231)',
            data: dataPointsAges05_14Infected,
        }, {
            label: '15-34',
            backgroundColor: 'rgb(123, 45, 123)',
            borderColor: 'rgb(123, 45, 123)',
            data: dataPointsAges15_34Infected,
        }, {
            label: '35-59',
            backgroundColor: 'rgb(45, 255, 43)',
            borderColor: 'rgb(45, 255, 43)',
            data: dataPointsAges35_59Infected,
        }, {
            label: '60-79',
            backgroundColor: 'rgb(255, 54, 255)',
            borderColor: 'rgb(255, 54, 255)',
            data: dataPointsAges60_79Infected,
        }, {
            label: '80+',
            backgroundColor: 'rgb(128, 255, 230)',
            borderColor: 'rgb(128, 255, 230)',
            data: dataPointsAges60_79Infected,
        }]
    };

    var dataPointsAges00_04Deaths = [];
    for (var j = 0; j < dataW.length; j++) {
        var found = false;
        for (var i = 0; i < alter00_04.length; i++) {
            if (dataW[j].month == alter00_04[i].month && dataW[j].year == alter00_04[i].year) {
                found = true;
                dataPointsAges00_04Deaths.push(alter00_04[i].deaths);
                break;
            }
        }

        if (!found) {
            dataPointsAges00_04Deaths.push(0);
        }
    }

    var dataPointsAges05_14Deaths = [];
    for (var j = 0; j < dataW.length; j++) {
        var found = false;
        for (var i = 0; i < alter05_14.length; i++) {
            if (dataW[j].month == alter05_14[i].month && dataW[j].year == alter05_14[i].year) {
                found = true;
                dataPointsAges05_14Deaths.push(alter05_14[i].deaths);
                break;
            }
        }

        if (!found) {
            dataPointsAges05_14Deaths.push(0);
        }
    }

    var dataPointsAges15_34Deaths = [];
    for (var j = 0; j < dataW.length; j++) {
        var found = false;
        for (var i = 0; i < alter15_34.length; i++) {
            if (dataW[j].month == alter15_34[i].month && dataW[j].year == alter15_34[i].year) {
                found = true;
                dataPointsAges15_34Deaths.push(alter15_34[i].deaths);
                break;
            }
        }

        if (!found) {
            dataPointsAges15_34Deaths.push(0);
        }
    }

    var dataPointsAges35_59Deaths = [];
    for (var j = 0; j < dataW.length; j++) {
        var found = false;
        for (var i = 0; i < alter35_59.length; i++) {
            if (dataW[j].month == alter35_59[i].month && dataW[j].year == alter35_59[i].year) {
                found = true;
                dataPointsAges35_59Deaths.push(alter35_59[i].deaths);
                break;
            }
        }

        if (!found) {
            dataPointsAges35_59Deaths.push(0);
        }
    }

    var dataPointsAges60_79Deaths = [];
    for (var j = 0; j < dataW.length; j++) {
        var found = false;
        for (var i = 0; i < alter60_79.length; i++) {
            if (dataW[j].month == alter60_79[i].month && dataW[j].year == alter60_79[i].year) {
                found = true;
                dataPointsAges60_79Deaths.push(alter60_79[i].deaths);
                break;
            }
        }

        if (!found) {
            dataPointsAges60_79Deaths.push(0);
        }
    }

    var dataPointsAges80PlusDeaths = [];
    for (var j = 0; j < dataW.length; j++) {
        var found = false;
        for (var i = 0; i < alter80Plus.length; i++) {
            if (dataW[j].month == alter80Plus[i].month && dataW[j].year == alter80Plus[i].year) {
                found = true;
                dataPointsAges80PlusDeaths.push(alter80Plus[i].deaths);
                break;
            }
        }

        if (!found) {
            dataPointsAges80PlusDeaths.push(0);
        }
    }

    const agesDeaths = {
        labels: labelsW,
        datasets: [{
            label: '0-4',
            backgroundColor: 'rgb(255, 99, 132)',
            borderColor: 'rgb(255, 99, 132)',
            data: dataPointsAges00_04Deaths,
        }, {
            label: '5-14',
            backgroundColor: 'rgb(123, 12, 231)',
            borderColor: 'rgb(123, 12, 231)',
            data: dataPointsAges05_14Deaths,
        }, {
            label: '15-34',
            backgroundColor: 'rgb(123, 45, 123)',
            borderColor: 'rgb(123, 45, 123)',
            data: dataPointsAges15_34Deaths,
        }, {
            label: '35-59',
            backgroundColor: 'rgb(45, 255, 43)',
            borderColor: 'rgb(45, 255, 43)',
            data: dataPointsAges35_59Deaths,
        }, {
            label: '60-79',
            backgroundColor: 'rgb(255, 54, 255)',
            borderColor: 'rgb(255, 54, 255)',
            data: dataPointsAges60_79Deaths,
        }, {
            label: '80+',
            backgroundColor: 'rgb(128, 255, 230)',
            borderColor: 'rgb(128, 255, 230)',
            data: dataPointsAges80PlusDeaths,
        }]
    };

    const config1 = {
        type: 'line',
        data: deaths,
        options: {
            layout: {
                padding: 10
            }
        }
    };

    const config2 = {
        type: 'line',
        data: infected,
        options: {
            layout: {
                padding: 10
            }
        }
    };

    const config3 = {
        type: 'line',
        data: vaccinated,
        options: {
            layout: {
                padding: 10
            }
        }
    };

    const config4 = {
        type: 'pie',
        data: genderDeaths,
        options: {
            layout: {
                padding: 10
            }
        }
    };

    const config5 = {
        type: 'pie',
        data: genderCases,
        options: {
            layout: {
                padding: 10
            }
        }
    };

    const config6 = {
        type: 'pie',
        data: altersgruppenDeaths,
        options: {
            layout: {
                padding: 10
            }
        }
    };

    const config7 = {
        type: 'pie',
        data: altersgruppenCases,
        options: {
            layout: {
                padding: 10
            }
        }
    };

    const config8 = {
        type: 'line',
        data: agesInfected,
        options: {
            layout: {
                padding: 10
            }
        }
    };

    const config9 = {
        type: 'line',
        data: agesDeaths,
        options: {
            layout: {
                padding: 10
            }
        }
    };

    const config10 = {
        type: 'line',
        data: recovered,
        options: {
            layout: {
                padding: 10
            }
        }
    };

    Chart.defaults.color = 'rgb(255, 255, 255)';
    Chart.defaults.borderColor = 'rgb(255, 255, 255, 0.1)';
    Chart.defaults.backgroundColor = 'rgb(255, 255, 255)';

    new Chart(
        document.getElementById('deaths'),
        config1
    );

    new Chart(
        document.getElementById('infected'),
        config2
    );

    new Chart(
        document.getElementById('vaccinated'),
        config3
    );

    new Chart(
        document.getElementById('genderDeaths'),
        config4
    );

    new Chart(
        document.getElementById('genderCases'),
        config5
    );

    new Chart(
        document.getElementById('altersgruppenDeaths'),
        config6
    );

    new Chart(
        document.getElementById('altersgruppenCases'),
        config7
    );

    new Chart(
        document.getElementById('agesInfected'),
        config8
    );

    new Chart(
        document.getElementById('agesDeaths'),
        config9
    );

    new Chart(
        document.getElementById('recovered'),
        config10
    );
}

function getLabels(newArr) {
    var dataLabels = [];
    for (var i = 0; i < newArr.length; i++) {
        switch (newArr[i].month) {
            case 1:
                dataLabels.push("Januar " + newArr[i].year);
                break;
            case 2:
                dataLabels.push("Februar " + newArr[i].year);
                break;
            case 3:
                dataLabels.push("März " + newArr[i].year);
                break;
            case 4:
                dataLabels.push("April " + newArr[i].year);
                break;
            case 5:
                dataLabels.push("Mai " + newArr[i].year);
                break;
            case 6:
                dataLabels.push("Juni " + newArr[i].year);
                break;
            case 7:
                dataLabels.push("Juli " + newArr[i].year);
                break;
            case 8:
                dataLabels.push("August " + newArr[i].year);
                break;
            case 9:
                dataLabels.push("September " + newArr[i].year);
                break;
            case 10:
                dataLabels.push("Oktober " + newArr[i].year);
                break;
            case 11:
                dataLabels.push("November " + newArr[i].year);
                break;
            case 12:
                dataLabels.push("Dezember " + newArr[i].year);
                break;
        }
    }

    return dataLabels;
}

async function fillTableLandkreise() {
    var data = await fetch("/data/district");
    var json = JSON.parse(await data.text());

    var landkreise = json["Landkreise"];
    for (var i = 0; i < landkreise.length; i++) {
        var td;
        var tr = document.createElement("tr");

        td = document.createElement("td");
        td.innerText = landkreise[i]["Landkreis"];
        tr.appendChild(td);

        td = document.createElement("td");
        td.innerText = landkreise[i]["todesfaelle"];
        tr.appendChild(td);

        td = document.createElement("td");
        td.innerText = landkreise[i]["genesen"];
        tr.appendChild(td);

        td = document.createElement("td");
        td.innerText = landkreise[i]["infizierte"];
        tr.appendChild(td);

        td = document.createElement("td");
        td.innerText = landkreise[i]["geimpft"];
        tr.appendChild(td);

        td = document.createElement("td");
        td.innerText = landkreise[i]["immune"];
        tr.appendChild(td);

        td = document.createElement("td");
        td.innerText = landkreise[i]["gesamtbevoelkerung"];
        tr.appendChild(td);

        td = document.createElement("td");
        td.innerText = landkreise[i]["wochen_inzidenz"];
        tr.appendChild(td);

        document.getElementById("tabelleLandkreise").getElementsByTagName("tbody")[0].appendChild(tr);
    }
}

fillTableLandkreise();

function fillTableTote(dataW, dataM, dataG) {
    document.getElementById("tabelleTote").innerHTML = "";

    var deathsG = 0;
    for (var i = 0; i < dataG.length; i++) {
        deathsG = deathsG + dataG[i];
    }

    var deathsM = 0;
    for (var i = 0; i < dataM.length; i++) {
        deathsM = deathsM + dataM[i];
    }

    var deathsW = 0;
    for (var i = 0; i < dataW.length; i++) {
        deathsW = deathsW + dataW[i];
    }

    var tbody = document.createElement("tbody");
    document.getElementById("tabelleTote").appendChild(tbody);

    var td;
    var tr = document.createElement("tr");

    td = document.createElement("td");
    td.innerText = "Gesamt";
    tr.appendChild(td);

    td = document.createElement("td");
    td.innerText = deathsG;
    tr.appendChild(td);

    document.getElementById("tabelleTote").getElementsByTagName("tbody")[0].appendChild(tr);

    tr = document.createElement("tr");

    td = document.createElement("td");
    td.innerText = "Männlich";
    tr.appendChild(td);

    td = document.createElement("td");
    td.innerText = deathsM;
    tr.appendChild(td);

    document.getElementById("tabelleTote").getElementsByTagName("tbody")[0].appendChild(tr);

    tr = document.createElement("tr");

    td = document.createElement("td");
    td.innerText = "Weiblich";
    tr.appendChild(td);

    td = document.createElement("td");
    td.innerText = deathsW;
    tr.appendChild(td);

    document.getElementById("tabelleTote").getElementsByTagName("tbody")[0].appendChild(tr);
}

function fillTableInfected(dataW, dataM, dataG) {
    document.getElementById("tabelleInfected").innerHTML = "";

    var casesG = 0;
    for (var i = 0; i < dataG.length; i++) {
        casesG = casesG + dataG[i];
    }

    var casesM = 0;
    for (var i = 0; i < dataM.length; i++) {
        casesM = casesM + dataM[i];
    }

    var casesW = 0;
    for (var i = 0; i < dataW.length; i++) {
        casesW = casesW + dataW[i];
    }

    var tbody = document.createElement("tbody");
    document.getElementById("tabelleInfected").appendChild(tbody);

    var td;
    var tr = document.createElement("tr");

    td = document.createElement("td");
    td.innerText = "Gesamt";
    tr.appendChild(td);

    td = document.createElement("td");
    td.innerText = casesG;
    tr.appendChild(td);

    document.getElementById("tabelleInfected").getElementsByTagName("tbody")[0].appendChild(tr);

    tr = document.createElement("tr");

    td = document.createElement("td");
    td.innerText = "Männlich";
    tr.appendChild(td);

    td = document.createElement("td");
    td.innerText = casesM;
    tr.appendChild(td);

    document.getElementById("tabelleInfected").getElementsByTagName("tbody")[0].appendChild(tr);

    tr = document.createElement("tr");

    td = document.createElement("td");
    td.innerText = "Weiblich";
    tr.appendChild(td);

    td = document.createElement("td");
    td.innerText = casesW;
    tr.appendChild(td);

    document.getElementById("tabelleInfected").getElementsByTagName("tbody")[0].appendChild(tr);
}

function fillTableRecovered(dataW, dataM, dataG) {
    document.getElementById("tabelleRecovered").innerHTML = "";

    var recoveredG = 0;
    for (var i = 0; i < dataG.length; i++) {
        recoveredG = recoveredG + dataG[i];
    }

    var recoveredM = 0;
    for (var i = 0; i < dataM.length; i++) {
        recoveredM = recoveredM + dataM[i];
    }

    var recoveredW = 0;
    for (var i = 0; i < dataW.length; i++) {
        recoveredW = recoveredW + dataW[i];
    }

    var tbody = document.createElement("tbody");
    document.getElementById("tabelleRecovered").appendChild(tbody);

    var td;
    var tr = document.createElement("tr");

    td = document.createElement("td");
    td.innerText = "Gesamt";
    tr.appendChild(td);

    td = document.createElement("td");
    td.innerText = recoveredG;
    tr.appendChild(td);

    document.getElementById("tabelleRecovered").getElementsByTagName("tbody")[0].appendChild(tr);

    tr = document.createElement("tr");

    td = document.createElement("td");
    td.innerText = "Männlich";
    tr.appendChild(td);

    td = document.createElement("td");
    td.innerText = recoveredM;
    tr.appendChild(td);

    document.getElementById("tabelleRecovered").getElementsByTagName("tbody")[0].appendChild(tr);

    tr = document.createElement("tr");

    td = document.createElement("td");
    td.innerText = "Weiblich";
    tr.appendChild(td);

    td = document.createElement("td");
    td.innerText = recoveredW;
    tr.appendChild(td);

    document.getElementById("tabelleRecovered").getElementsByTagName("tbody")[0].appendChild(tr);
}

function fillTableVaccinated(data) {
    document.getElementById("tabelleVaccinated").innerHTML = "";

    var vaccinated = 0;
    for (var i = 0; i < data.length; i++) {
        vaccinated = vaccinated + data[i].anzahl;
    }

    var tbody = document.createElement("tbody");
    document.getElementById("tabelleVaccinated").appendChild(tbody);

    var td;
    var tr = document.createElement("tr");

    td = document.createElement("td");
    td.innerText = "Gesamt";
    tr.appendChild(td);

    td = document.createElement("td");
    td.innerText = vaccinated;
    tr.appendChild(td);

    document.getElementById("tabelleVaccinated").getElementsByTagName("tbody")[0].appendChild(tr);
}

async function init() {
    var tmp = {
        infizierte: "",
        genesen: "",
        geimpft: "",
        immun: "",
        tode: ""
    };

    var overview = await getOverview();
    tmp.infizierte = overview.infizierte;
    tmp.genesen = overview.genesen;
    tmp.geimpft = overview.geimpft;
    tmp.immun = overview.immun;
    tmp.tode = overview.todesfaelle;

    var content = document.getElementById("replaceContentBW");
    content.innerText = "Infizierte: " + tmp.infizierte + "\nGenesen: " + tmp.genesen + "\nGeimpft: " + tmp.geimpft + "\nImmun: " + tmp.immun + "\nTodesfälle: " + tmp.tode;
}

init();